{"version":3,"file":"static/js/7951.8e3b93aa.chunk.js","mappings":"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","sources":["common/components/ag-grid/AgGridFontInjector.tsx","common/components/ag-grid/AgGrid.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelListPageColumnSelector.tsx","experiment-tracking/components/experiment-logged-models/hooks/useLoggedModelsListPagePageState.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelListPageTableContext.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelListPageTableEmpty.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelListPageTable.tsx","experiment-tracking/components/experiment-logged-models/hooks/useExperimentLoggedModelListPageRowVisibility.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelTableNameCell.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelTableDatasetCell.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelTableSourceRunCell.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelActionsCell.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelTableRegisteredModelsCell.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelTableDatasetColHeader.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelTableSourceCell.tsx","experiment-tracking/components/experiment-logged-models/hooks/useExperimentLoggedModelListPageTableColumns.tsx"],"sourcesContent":["import { useEffect, useRef } from 'react';\n\n// eslint-disable-next-line max-len\nconst stylesContent = `@font-face { font-family: \"agGridBalham\"; src: url(\"data:application/font-woff;charset=utf-8;base64,\") format(\"woff\"); font-weight: normal; font-style: normal; }`;\n\n/**\n * Embedding agGrid inside shadow DOM imposes a problem with its embedded fonts\n * that are not being present on the main document level which results in erroneous\n * checkbox rendering. This components checks if the component is being rendered inside\n * shadow DOM part and if true, it reinjects the snapshotted agGrid styles later on.\n */\nexport const AgGridFontInjector = () => {\n  const domElementReference = useRef<HTMLSpanElement>(null);\n\n  useEffect(() => {\n    if (domElementReference.current && domElementReference.current.getRootNode() !== document) {\n      const injectedStyleElement = document.createElement('style');\n      injectedStyleElement.className = `ag-grid-snapshot-base-css`;\n      injectedStyleElement.appendChild(document.createTextNode(stylesContent));\n      document.head.appendChild(injectedStyleElement);\n\n      return () => injectedStyleElement.remove();\n    }\n\n    return () => {};\n  }, []);\n\n  return <span ref={domElementReference} />;\n};\n","import { ClientSideRowModelModule } from '@ag-grid-community/client-side-row-model';\nimport { AgGridReact, AgGridReactProps, AgReactUiProps } from '@ag-grid-community/react/main';\nimport '@ag-grid-community/core/dist/styles/ag-grid.css';\nimport '@ag-grid-community/core/dist/styles/ag-theme-balham.css';\nimport { AgGridFontInjector } from './AgGridFontInjector';\n\n/**\n * A local wrapper component that embeds imported AgGrid instance.\n * Extracted to a separate module to ensure that it will be in placed a single chunk.\n */\nconst MLFlowAgGrid = (props: AgGridReactProps | AgReactUiProps) => (\n  <>\n    <AgGridFontInjector />\n    <AgGridReact modules={[ClientSideRowModelModule]} {...props} />\n  </>\n);\n\nexport default MLFlowAgGrid;\n","import { Button, ColumnsIcon, DropdownMenu, Tree, TreeDataNode, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage, useIntl } from 'react-intl';\n\nimport { compact } from 'lodash';\nimport { useMemo } from 'react';\nimport {\n  ExperimentLoggedModelListPageKnownColumnGroups,\n  ExperimentLoggedModelListPageStaticColumns,\n  LOGGED_MODEL_LIST_METRIC_COLUMN_PREFIX,\n} from './hooks/useExperimentLoggedModelListPageTableColumns';\n\ninterface BasicColumnDef {\n  colId?: string;\n  groupId?: string;\n  headerName?: string;\n  children?: BasicColumnDef[];\n}\n\nconst METRIC_AGGREGATE_GROUP_ID = 'all_metrics';\n\nconst defaultExpandedTreeGroups = [\n  ExperimentLoggedModelListPageKnownColumnGroups.Attributes,\n  METRIC_AGGREGATE_GROUP_ID,\n];\n\nexport const ExperimentLoggedModelListPageColumnSelector = ({\n  onUpdateColumns,\n  columnVisibility = {},\n  columnDefs,\n  disabled,\n  customTrigger,\n}: {\n  onUpdateColumns: (columnVisibility: Record<string, boolean>) => void;\n  columnVisibility?: Record<string, boolean>;\n  columnDefs?: BasicColumnDef[];\n  disabled?: boolean;\n  customTrigger?: React.ReactNode;\n}) => {\n  const intl = useIntl();\n\n  // Calculate the tree data for the column selector\n  const { leafColumnIds = [], treeData = [] } = useMemo(() => {\n    // If there are no column definitions, return an empty tree\n    if (!columnDefs) {\n      return {};\n    }\n\n    // We need to regroup columns so all dataset metric groups are included in another subtree\n    const groupedColumnDefinitions: BasicColumnDef[] = [];\n\n    // First, add the attribute column group\n    const attributeColumnGroup = columnDefs.find(\n      (col) => col.groupId === ExperimentLoggedModelListPageKnownColumnGroups.Attributes,\n    );\n\n    if (attributeColumnGroup) {\n      groupedColumnDefinitions.push({\n        ...attributeColumnGroup,\n        // Filter out the static columns\n        children: attributeColumnGroup.children?.filter(\n          ({ colId }) => colId && !ExperimentLoggedModelListPageStaticColumns.includes(colId),\n        ),\n      });\n    }\n\n    // Next, get all the dataset-grouped metric column groups\n    const metricColumnGroups = columnDefs\n      .filter((col) => col.groupId?.startsWith(LOGGED_MODEL_LIST_METRIC_COLUMN_PREFIX))\n      .map((col) => ({\n        ...col,\n        headerName: col.headerName\n          ? `Dataset: ${col.headerName}`\n          : intl.formatMessage({\n              defaultMessage: 'No dataset',\n              description: 'Label for the ungrouped metrics column group in the logged model column selector',\n            }),\n      }));\n\n    // Aggregate all metric column groups into a single group\n    if (metricColumnGroups.length > 0) {\n      groupedColumnDefinitions.push({\n        groupId: METRIC_AGGREGATE_GROUP_ID,\n        headerName: intl.formatMessage({\n          defaultMessage: 'Metrics',\n          description: 'Label for the metrics column group in the logged model column selector',\n        }),\n        children: metricColumnGroups,\n      });\n    }\n\n    // In the end, add the parameter column group\n    const paramColumnGroup = columnDefs.find(\n      (col) => col.groupId === ExperimentLoggedModelListPageKnownColumnGroups.Params,\n    );\n\n    if (paramColumnGroup) {\n      groupedColumnDefinitions.push(paramColumnGroup);\n    }\n\n    const leafColumnIds: string[] = [];\n\n    // Function for building tree branches recursively\n    const buildDuboisTreeBranch = (col: BasicColumnDef): TreeDataNode => {\n      if (col.colId) {\n        leafColumnIds.push(col.colId);\n      }\n      return {\n        key: col.groupId ?? col.colId ?? '',\n        title: col.headerName ?? '',\n        children: compact(col.children?.map(buildDuboisTreeBranch) ?? []),\n      };\n    };\n\n    // Build a tree root for a column groups\n    const treeData = compact(groupedColumnDefinitions?.map((col) => buildDuboisTreeBranch(col)) ?? []);\n\n    return {\n      leafColumnIds,\n      treeData,\n    };\n  }, [columnDefs, intl]);\n\n  const treeCheckChangeHandler: React.ComponentProps<typeof Tree>['onCheck'] = (checkedKeys) => {\n    // Extract key data conforming to unusual antd API\n    const keys = 'checked' in checkedKeys ? checkedKeys.checked : checkedKeys;\n\n    // Start with empty visibility map\n    const columnVisibility: Record<string, boolean> = {};\n\n    // Go through all leaf columns and set visibility based on the checked keys.\n    // We use one-way visibility flag, i.e. use only \"false\" to hide a column.\n    for (const key of leafColumnIds) {\n      if (!keys.includes(key)) {\n        columnVisibility[key] = false;\n      }\n    }\n\n    // Call the update handler\n    onUpdateColumns(columnVisibility);\n  };\n\n  return (\n    <DropdownMenu.Root>\n      <DropdownMenu.Trigger asChild disabled={disabled}>\n        {customTrigger ?? (\n          <Button componentId=\"mlflow.logged_model.list.columns\" icon={<ColumnsIcon />} disabled={disabled}>\n            <FormattedMessage\n              defaultMessage=\"Columns\"\n              description=\"Label for the column selector button in the logged model list page\"\n            />\n          </Button>\n        )}\n      </DropdownMenu.Trigger>\n      <DropdownMenu.Content css={{ maxHeight: 500, paddingRight: 32 }}>\n        <Tree\n          treeData={treeData}\n          mode=\"checkable\"\n          showLine\n          defaultExpandedKeys={defaultExpandedTreeGroups}\n          // By default, check all columns that are visible\n          defaultCheckedKeys={leafColumnIds.filter((colId) => columnVisibility[colId] !== false)}\n          onCheck={treeCheckChangeHandler}\n        />\n      </DropdownMenu.Content>\n    </DropdownMenu.Root>\n  );\n};\n","import { first, isEmpty, isEqual } from 'lodash';\nimport { useCallback, useReducer, useState } from 'react';\nimport { RUNS_VISIBILITY_MODE } from '../../experiment-page/models/ExperimentPageUIState';\nimport { isLoggedModelRowHidden } from './useExperimentLoggedModelListPageRowVisibility';\nimport { LoggedModelMetricDataset } from '../../../types';\nimport { ExperimentLoggedModelListPageKnownColumns } from './useExperimentLoggedModelListPageTableColumns';\nimport { useSafeDeferredValue } from '../../../../common/hooks/useSafeDeferredValue';\n\ntype ActionType =\n  | { type: 'SET_ORDER_BY'; orderByColumn: string; orderByAsc: boolean }\n  | { type: 'SET_COLUMN_VISIBILITY'; columnVisibility: Record<string, boolean> }\n  | { type: 'TOGGLE_DATASET'; dataset: LoggedModelMetricDataset }\n  | { type: 'CLEAR_DATASETS' }\n  | { type: 'SET_RUN_VISIBILITY'; visibilityMode?: RUNS_VISIBILITY_MODE; rowUuid?: string; rowIndex?: number };\n\n/**\n * Defines current state of the logged models table.\n */\nexport type LoggedModelsListPageState = {\n  orderByColumn?: string;\n  orderByAsc: boolean;\n  columnVisibility?: Record<string, boolean>;\n  rowVisibilityMode: RUNS_VISIBILITY_MODE;\n  rowVisibilityMap?: Record<string, boolean>;\n  selectedFilterDatasets?: LoggedModelMetricDataset[];\n  searchQuery?: string;\n};\n\nexport const LoggedModelsListPageSortableColumns: string[] = [ExperimentLoggedModelListPageKnownColumns.CreationTime];\n\n/**\n * Provides state management for the logged models table.\n */\nexport const useLoggedModelsListPageState = () => {\n  const [state, dispatch] = useReducer(\n    (state: LoggedModelsListPageState, action: ActionType): LoggedModelsListPageState => {\n      if (action.type === 'SET_ORDER_BY') {\n        return { ...state, orderByColumn: action.orderByColumn, orderByAsc: action.orderByAsc };\n      }\n      if (action.type === 'SET_COLUMN_VISIBILITY') {\n        return { ...state, columnVisibility: action.columnVisibility };\n      }\n      if (action.type === 'CLEAR_DATASETS') {\n        return { ...state, selectedFilterDatasets: [] };\n      }\n      if (action.type === 'TOGGLE_DATASET') {\n        return {\n          ...state,\n          selectedFilterDatasets: state.selectedFilterDatasets?.some((dataset) => isEqual(dataset, action.dataset))\n            ? state.selectedFilterDatasets?.filter((dataset) => !isEqual(dataset, action.dataset))\n            : [...(state.selectedFilterDatasets ?? []), action.dataset],\n        };\n      }\n      if (action.type === 'SET_RUN_VISIBILITY') {\n        if (action.visibilityMode) {\n          return { ...state, rowVisibilityMode: action.visibilityMode, rowVisibilityMap: {} };\n        }\n        if (action.rowUuid && action.rowIndex !== undefined) {\n          const currentHidden = isLoggedModelRowHidden(\n            state.rowVisibilityMode,\n            action.rowUuid,\n            action.rowIndex,\n            state.rowVisibilityMap ?? {},\n          );\n          return { ...state, rowVisibilityMap: { ...state.rowVisibilityMap, [action.rowUuid]: currentHidden } };\n        }\n      }\n      return state;\n    },\n    {\n      orderByColumn: first(LoggedModelsListPageSortableColumns),\n      orderByAsc: false,\n      columnVisibility: {},\n      rowVisibilityMode: RUNS_VISIBILITY_MODE.FIRST_10_RUNS,\n    },\n  );\n\n  const setOrderBy = useCallback(\n    (orderByColumn: string, orderByAsc: boolean) => dispatch({ type: 'SET_ORDER_BY', orderByColumn, orderByAsc }),\n    [],\n  );\n\n  const setColumnVisibility = useCallback(\n    (columnVisibility: Record<string, boolean>) => dispatch({ type: 'SET_COLUMN_VISIBILITY', columnVisibility }),\n    [],\n  );\n\n  const setRowVisibilityMode = useCallback(\n    (visibilityMode: RUNS_VISIBILITY_MODE) => dispatch({ type: 'SET_RUN_VISIBILITY', visibilityMode }),\n    [],\n  );\n\n  const toggleRowVisibility = useCallback(\n    (rowUuid: string, rowIndex: number) => dispatch({ type: 'SET_RUN_VISIBILITY', rowUuid, rowIndex }),\n    [],\n  );\n\n  const toggleDataset = useCallback(\n    (dataset: LoggedModelMetricDataset) => dispatch({ type: 'TOGGLE_DATASET', dataset }),\n    [],\n  );\n\n  const clearSelectedDatasets = useCallback(() => dispatch({ type: 'CLEAR_DATASETS' }), []);\n\n  const deferredState = useSafeDeferredValue(state);\n\n  // Search filter state does not go through deferred value\n  const [searchQuery, updateSearchQuery] = useState<string>('');\n\n  // To be expanded with other filters in the future\n  const isFilteringActive = Boolean(searchQuery || !isEmpty(state.selectedFilterDatasets));\n\n  return {\n    state: deferredState,\n    isFilteringActive,\n    searchQuery,\n    setOrderBy,\n    setColumnVisibility,\n    setRowVisibilityMode,\n    toggleRowVisibility,\n    updateSearchQuery,\n    toggleDataset,\n    clearSelectedDatasets,\n  };\n};\n","import { createContext, useContext, useMemo } from 'react';\n\ntype ExperimentLoggedModelListPageTableContextType = {\n  moreResultsAvailable?: boolean;\n  isLoadingMore?: boolean;\n  loadMoreResults?: () => void;\n};\n\nconst ExperimentLoggedModelListPageTableContext = createContext<{\n  moreResultsAvailable?: boolean;\n  isLoadingMore?: boolean;\n  loadMoreResults?: () => void;\n}>({});\n\nexport const ExperimentLoggedModelListPageTableContextProvider = ({\n  loadMoreResults,\n  moreResultsAvailable,\n  isLoadingMore,\n  children,\n}: React.PropsWithChildren<ExperimentLoggedModelListPageTableContextType>) => {\n  const contextValue = useMemo(\n    () => ({\n      moreResultsAvailable,\n      loadMoreResults,\n      isLoadingMore,\n    }),\n    [moreResultsAvailable, loadMoreResults, isLoadingMore],\n  );\n\n  return (\n    <ExperimentLoggedModelListPageTableContext.Provider value={contextValue}>\n      {children}\n    </ExperimentLoggedModelListPageTableContext.Provider>\n  );\n};\n\nexport const useExperimentLoggedModelListPageTableContext = () => useContext(ExperimentLoggedModelListPageTableContext);\n","import { Button, DangerIcon, Empty, Modal, Spacer, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { CodeSnippet } from '@databricks/web-shared/snippet';\nimport { useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { getMlflow3DocsLink } from '../../constants';\n\nconst EXAMPLE_INSTALL_CODE = `pip install git+https://github.com/mlflow/mlflow@mlflow-3`;\nconst EXAMPLE_CODE = `\nimport pandas as pd\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\nfrom sklearn.datasets import load_iris\nfrom sklearn.model_selection import train_test_split\n\nimport mlflow\nimport mlflow.sklearn\nfrom mlflow.entities import Dataset\n\n# Helper function to compute metrics\ndef compute_metrics(actual, predicted):\n    rmse = mean_squared_error(actual, predicted) \n    mae = mean_absolute_error(actual, predicted)\n    r2 = r2_score(actual, predicted)\n    return rmse, mae, r2\n\n# Load Iris dataset and prepare the DataFrame\niris = load_iris()\niris_df = pd.DataFrame(data=iris.data, columns=iris.feature_names)\niris_df['quality'] = (iris.target == 2).astype(int)  # Create a binary target for simplicity\n\n# Split into training and testing datasets\ntrain_df, test_df = train_test_split(iris_df, test_size=0.2, random_state=42)\n\n# Start a run to represent the training job\nwith mlflow.start_run() as training_run:\n    # Load the training dataset with MLflow. We will link training metrics to this dataset.\n    train_dataset: Dataset = mlflow.data.from_pandas(train_df, name=\"train\")\n    train_x = train_dataset.df.drop([\"quality\"], axis=1)\n    train_y = train_dataset.df[[\"quality\"]]\n\n    # Fit a model to the training dataset\n    lr = ElasticNet(alpha=0.5, l1_ratio=0.5, random_state=42)\n    lr.fit(train_x, train_y)\n\n    # Log the model, specifying its ElasticNet parameters (alpha, l1_ratio)\n    # As a new feature, the LoggedModel entity is linked to its name and params\n    model_info = mlflow.sklearn.log_model(\n        sk_model=lr,\n        name=\"elasticnet\",\n        params={\n            \"alpha\": 0.5,\n            \"l1_ratio\": 0.5,\n        },\n        input_example = train_x\n    )\n\n    # Inspect the LoggedModel and its properties\n    logged_model = mlflow.get_logged_model(model_info.model_id)\n    print(logged_model.model_id, logged_model.params)\n\n    # Evaluate the model on the training dataset and log metrics\n    # These metrics are now linked to the LoggedModel entity\n    predictions = lr.predict(train_x)\n    (rmse, mae, r2) = compute_metrics(train_y, predictions)\n    mlflow.log_metrics(\n        metrics={\n            \"rmse\": rmse,\n            \"r2\": r2,\n            \"mae\": mae,\n        },\n        model_id=logged_model.model_id,\n        dataset=train_dataset\n    )\n\n    # Inspect the LoggedModel, now with metrics\n    logged_model = mlflow.get_logged_model(model_info.model_id)\n    print(logged_model.model_id, logged_model.metrics)`.trim();\n\nexport const ExperimentLoggedModelListPageTableEmpty = ({\n  displayShowExampleButton = true,\n  isFilteringActive = false,\n  badRequestError,\n}: {\n  displayShowExampleButton?: boolean;\n  isFilteringActive?: boolean;\n  badRequestError?: Error;\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  const [isCodeExampleVisible, setIsCodeExampleVisible] = useState(false);\n\n  return (\n    <div\n      css={{\n        inset: 0,\n        top: theme.general.heightBase + theme.spacing.lg,\n        position: 'absolute',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        minHeight: 160,\n      }}\n    >\n      <Empty\n        title={\n          badRequestError ? (\n            <FormattedMessage\n              defaultMessage=\"Request error\"\n              description=\"Error state title displayed in the logged models list page\"\n            />\n          ) : isFilteringActive ? (\n            <FormattedMessage\n              defaultMessage=\"No models found\"\n              description=\"Empty state title displayed when all models are filtered out in the logged models list page\"\n            />\n          ) : (\n            <FormattedMessage\n              defaultMessage=\"No models logged\"\n              description=\"Placeholder for empty models table on the logged models list page\"\n            />\n          )\n        }\n        description={\n          badRequestError ? (\n            badRequestError.message\n          ) : isFilteringActive ? (\n            <FormattedMessage\n              defaultMessage=\"We couldn't find any models matching your search criteria. Try changing your search filters.\"\n              description=\"Empty state message displayed when all models are filtered out in the logged models list page\"\n            />\n          ) : (\n            <FormattedMessage\n              defaultMessage=\"Your models will appear here once you log them using newest version of MLflow. <link>Learn more</link>.\"\n              description=\"Placeholder for empty models table on the logged models list page\"\n              values={{\n                link: (chunks) => (\n                  <Typography.Link\n                    componentId=\"mlflow.logged_models.list.no_results_learn_more\"\n                    openInNewTab\n                    href={getMlflow3DocsLink()}\n                  >\n                    {chunks}\n                  </Typography.Link>\n                ),\n              }}\n            />\n          )\n        }\n        image={badRequestError ? <DangerIcon /> : undefined}\n        button={\n          displayShowExampleButton && !isFilteringActive && !badRequestError ? (\n            <Button\n              type=\"primary\"\n              componentId=\"mlflow.logged_models.list.show_example_code\"\n              onClick={() => setIsCodeExampleVisible(!isCodeExampleVisible)}\n            >\n              <FormattedMessage\n                defaultMessage=\"Show example code\"\n                description=\"Button for showing logged models quickstart example code\"\n              />\n            </Button>\n          ) : null\n        }\n      />\n      <Modal\n        size=\"wide\"\n        visible={isCodeExampleVisible}\n        onCancel={() => setIsCodeExampleVisible(false)}\n        title={\n          <FormattedMessage\n            defaultMessage=\"Example code\"\n            description=\"Title of the modal with the logged models quickstart example code\"\n          />\n        }\n        componentId=\"mlflow.logged_models.list.example_code_modal\"\n        okText={\n          <FormattedMessage\n            defaultMessage=\"Close\"\n            description=\"Button for closing modal with the logged models quickstart example code\"\n          />\n        }\n        onOk={() => setIsCodeExampleVisible(false)}\n      >\n        <Typography.Text>\n          <FormattedMessage\n            defaultMessage=\"Install <code>mlflow</code> from <code>mlflow-3</code> branch:\"\n            description=\"Instruction for installing MLflow from mlflow-3 branch in log MLflow 3 models\"\n            values={{ code: (chunks) => <code>{chunks}</code> }}\n          />\n        </Typography.Text>\n        <CodeSnippet language=\"text\">{EXAMPLE_INSTALL_CODE}</CodeSnippet>\n        <Spacer size=\"sm\" />\n        <FormattedMessage\n          defaultMessage=\"Run example training code:\"\n          description=\"Instruction for running example training code in order to log MLflow 3 models\"\n        />\n        <CodeSnippet language=\"python\">{EXAMPLE_CODE}</CodeSnippet>\n      </Modal>\n    </div>\n  );\n};\n","import {\n  Button,\n  Empty,\n  getShadowScrollStyles,\n  TableSkeleton,\n  Typography,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport MLFlowAgGrid from '../../../common/components/ag-grid/AgGrid';\nimport { useExperimentAgGridTableStyles } from '../experiment-page/components/runs/ExperimentViewRunsTable';\nimport type { LoggedModelProto, RunEntity } from '../../types';\nimport React, { useCallback, useEffect, useMemo, useRef } from 'react';\nimport {\n  ExperimentLoggedModelListPageTableContextProvider,\n  useExperimentLoggedModelListPageTableContext,\n} from './ExperimentLoggedModelListPageTableContext';\nimport { LoggedModelsListPageSortableColumns } from './hooks/useLoggedModelsListPagePageState';\nimport { type ColDef, type ColGroupDef, ColumnApi, type SortChangedEvent } from '@ag-grid-community/core';\nimport { FormattedMessage } from 'react-intl';\nimport { useRunsHighlightTableRow } from '../runs-charts/hooks/useRunsHighlightTableRow';\nimport { ExperimentLoggedModelListPageTableEmpty } from './ExperimentLoggedModelListPageTableEmpty';\nimport { LOGGED_MODEL_LIST_METRIC_COLUMN_PREFIX } from './hooks/useExperimentLoggedModelListPageTableColumns';\n\nconst LOGGED_MODELS_GRID_ROW_HEIGHT = 36;\n\ninterface ExperimentLoggedModelListPageTableProps {\n  loggedModels?: LoggedModelProto[];\n  isLoading: boolean;\n  isLoadingMore: boolean;\n  badRequestError?: Error;\n  moreResultsAvailable?: boolean;\n  onLoadMore?: () => void;\n  onOrderByChange?: (orderByColumn: string, orderByAsc: boolean) => void;\n  orderByColumn?: string;\n  orderByAsc?: boolean;\n  columnDefs?: (ColDef | ColGroupDef)[];\n  columnVisibility?: Record<string, boolean>;\n  relatedRunsData?: RunEntity[] | null;\n  className?: string;\n  disableLoadMore?: boolean;\n  displayShowExampleButton?: boolean;\n  isFilteringActive?: boolean;\n}\n\nconst LoadMoreRowSymbol = Symbol('LoadMoreRow');\n\nconst rowDataGetter = ({ data }: { data: LoggedModelProto }) => data?.info?.model_id ?? '';\n\nconst ExperimentLoggedModelListPageTableImpl = ({\n  loggedModels,\n  isLoading,\n  isLoadingMore,\n  badRequestError,\n  onLoadMore,\n  orderByColumn,\n  orderByAsc,\n  moreResultsAvailable,\n  onOrderByChange,\n  columnDefs = [],\n  columnVisibility,\n  relatedRunsData,\n  className,\n  disableLoadMore,\n  displayShowExampleButton = true,\n  isFilteringActive = true,\n}: ExperimentLoggedModelListPageTableProps) => {\n  const { theme } = useDesignSystemTheme();\n\n  const styles = useExperimentAgGridTableStyles({ usingCustomHeaderComponent: false });\n\n  const columnApiRef = useRef<ColumnApi | null>(null);\n\n  const loggedModelsWithSourceRuns = useMemo(() => {\n    if (!loggedModels || !relatedRunsData) {\n      return loggedModels;\n    }\n    return loggedModels.map((loggedModel) => {\n      const sourceRun = relatedRunsData.find((run) => run?.info?.runUuid === loggedModel?.info?.source_run_id);\n      return { ...loggedModel, sourceRun };\n    });\n  }, [loggedModels, relatedRunsData]);\n\n  // We need to add \"Load more\" as a special row at the end\n  // of the result list\n  const loggedModelsListWithLoadMore = useMemo(() => {\n    if (isLoading) {\n      return undefined;\n    }\n    if (disableLoadMore || !loggedModelsWithSourceRuns || loggedModelsWithSourceRuns.length === 0) {\n      return loggedModelsWithSourceRuns;\n    }\n    return [...loggedModelsWithSourceRuns, LoadMoreRowSymbol];\n  }, [loggedModelsWithSourceRuns, isLoading, disableLoadMore]);\n\n  const sortChangedHandler = useCallback(\n    (event: SortChangedEvent) => {\n      // Find the currently sorted column using ag-grid's column API\n      const sortedColumn = event.columnApi.getColumnState().find((col) => col.sort);\n      if (!sortedColumn?.colId) {\n        return;\n      }\n      if (\n        LoggedModelsListPageSortableColumns.includes(sortedColumn.colId) ||\n        sortedColumn.colId.startsWith(LOGGED_MODEL_LIST_METRIC_COLUMN_PREFIX)\n      ) {\n        onOrderByChange?.(sortedColumn?.colId, sortedColumn.sort === 'asc');\n      }\n    },\n    [onOrderByChange],\n  );\n\n  const updateSortIndicator = useCallback((field?: string, asc?: boolean) => {\n    // Reflect the sort state in the ag-grid's column state\n    const column = columnApiRef.current?.getColumn(field);\n    if (column) {\n      // Find the currently sorted column and if it's no the same one, clear its sort state\n      const currentSortedColumnId = columnApiRef.current?.getColumnState().find((col) => col.sort)?.colId;\n      if (currentSortedColumnId !== column.getColId()) {\n        columnApiRef.current?.getColumn(currentSortedColumnId)?.setSort(null);\n      }\n      column.setSort(asc ? 'asc' : 'desc');\n    }\n  }, []);\n\n  const updateColumnVisibility = useCallback((newColumnVisibility?: Record<string, boolean>) => {\n    // Reflect the visibility state in the ag-grid's column state\n    for (const column of columnApiRef?.current?.getAllColumns() ?? []) {\n      columnApiRef.current?.setColumnVisible(column, newColumnVisibility?.[column.getColId()] !== false);\n    }\n  }, []);\n\n  // Since ag-grid column API is not stateful, we use side effect to update the UI\n  useEffect(() => updateSortIndicator(orderByColumn, orderByAsc), [updateSortIndicator, orderByColumn, orderByAsc]);\n  useEffect(() => updateColumnVisibility(columnVisibility), [updateColumnVisibility, columnVisibility]);\n\n  const containsGroupedColumns = useMemo(() => columnDefs.some((col) => 'children' in col), [columnDefs]);\n\n  const containerElement = useRef<HTMLDivElement | null>(null);\n\n  const { cellMouseOverHandler, cellMouseOutHandler } = useRunsHighlightTableRow(\n    containerElement,\n    undefined,\n    true,\n    rowDataGetter,\n  );\n\n  return (\n    <ExperimentLoggedModelListPageTableContextProvider\n      loadMoreResults={onLoadMore}\n      moreResultsAvailable={moreResultsAvailable}\n      isLoadingMore={isLoadingMore}\n    >\n      <div\n        css={{\n          overflow: 'hidden',\n          flex: 1,\n          ...styles,\n          '.ag-cell': {\n            alignItems: 'center',\n          },\n          borderTop: `1px solid ${theme.colors.border}`,\n          '.ag-header-cell.is-checkbox-header-cell': {\n            paddingLeft: theme.spacing.sm,\n          },\n          '&& .ag-root-wrapper': { border: 0 },\n        }}\n        className={['ag-theme-balham', className].join(' ')}\n        ref={containerElement}\n      >\n        <MLFlowAgGrid\n          columnDefs={columnDefs}\n          rowData={loggedModelsListWithLoadMore}\n          rowHeight={LOGGED_MODELS_GRID_ROW_HEIGHT}\n          rowSelection=\"multiple\"\n          suppressRowClickSelection\n          suppressMovableColumns\n          getRowId={rowDataGetter}\n          suppressLoadingOverlay\n          suppressNoRowsOverlay\n          suppressColumnMoveAnimation\n          isFullWidthRow={({ rowNode }) => rowNode.data === LoadMoreRowSymbol}\n          fullWidthCellRenderer={LoadMoreRow}\n          onSortChanged={sortChangedHandler}\n          onGridReady={({ columnApi }) => {\n            columnApiRef.current = columnApi;\n            updateSortIndicator(orderByColumn, orderByAsc);\n            updateColumnVisibility(columnVisibility);\n          }}\n          onCellMouseOver={cellMouseOverHandler}\n          onCellMouseOut={cellMouseOutHandler}\n        />\n\n        {isLoading && (\n          <div\n            css={{\n              inset: 0,\n              top: (containsGroupedColumns ? theme.general.heightBase : 0) + theme.spacing.lg,\n              position: 'absolute',\n              paddingTop: theme.spacing.md,\n              paddingRight: theme.spacing.md,\n            }}\n          >\n            <TableSkeleton\n              lines={8}\n              label={\n                <FormattedMessage\n                  defaultMessage=\"Models loading\"\n                  description=\"Label for a loading spinner when table containing models is being loaded\"\n                />\n              }\n            />\n          </div>\n        )}\n        {!isLoading && loggedModels?.length === 0 && (\n          <ExperimentLoggedModelListPageTableEmpty\n            displayShowExampleButton={displayShowExampleButton}\n            badRequestError={badRequestError}\n            isFilteringActive={isFilteringActive}\n          />\n        )}\n      </div>\n    </ExperimentLoggedModelListPageTableContextProvider>\n  );\n};\n\nconst LoadMoreRow = () => {\n  const { theme } = useDesignSystemTheme();\n\n  const { moreResultsAvailable, loadMoreResults, isLoadingMore } = useExperimentLoggedModelListPageTableContext();\n\n  if (!moreResultsAvailable) {\n    return null;\n  }\n  return (\n    <div\n      css={{\n        pointerEvents: 'all',\n        userSelect: 'all',\n        padding: theme.spacing.sm,\n        display: 'flex',\n        justifyContent: 'center',\n      }}\n    >\n      <Button\n        componentId=\"mlflow.logged_models.list.load_more\"\n        type=\"primary\"\n        size=\"small\"\n        onClick={loadMoreResults}\n        loading={isLoadingMore}\n      >\n        <FormattedMessage\n          defaultMessage=\"Load more\"\n          description=\"Label for a button to load more results in the logged models table\"\n        />\n      </Button>\n    </div>\n  );\n};\n\nexport const ExperimentLoggedModelListPageTable = React.memo(ExperimentLoggedModelListPageTableImpl);\n","import { createContext, useCallback, useContext, useMemo, useRef } from 'react';\nimport { RUNS_VISIBILITY_MODE } from '../../experiment-page/models/ExperimentPageUIState';\nimport { determineIfRowIsHidden } from '../../experiment-page/utils/experimentPage.common-row-utils';\nimport { isUndefined } from 'lodash';\n\nconst ExperimentLoggedModelListPageRowVisibilityContext = createContext<{\n  isRowHidden: (rowUuid: string, rowIndex: number) => boolean;\n  setRowVisibilityMode: (visibilityMode: RUNS_VISIBILITY_MODE) => void;\n  toggleRowVisibility: (rowUuid: string, rowIndex: number) => void;\n  visibilityMode: RUNS_VISIBILITY_MODE;\n  usingCustomVisibility: boolean;\n}>({\n  isRowHidden: () => false,\n  setRowVisibilityMode: () => {},\n  toggleRowVisibility: () => {},\n  visibilityMode: RUNS_VISIBILITY_MODE.FIRST_10_RUNS,\n  usingCustomVisibility: false,\n});\n\n// Utility function that determines if a particular table row should be hidden,\n// based on the selected mode, position on the list and the visibility map.\nexport const isLoggedModelRowHidden = (\n  rowsVisibilityMode: RUNS_VISIBILITY_MODE,\n  runUuid: string,\n  rowIndex: number,\n  runsVisibilityMap: Record<string, boolean>,\n) => {\n  // If using rows visibility map, we should always use it to determine visibility\n  if (!isUndefined(runsVisibilityMap[runUuid])) {\n    return !runsVisibilityMap[runUuid];\n  }\n  if (rowsVisibilityMode === RUNS_VISIBILITY_MODE.HIDEALL) {\n    return true;\n  }\n  if (rowsVisibilityMode === RUNS_VISIBILITY_MODE.FIRST_10_RUNS) {\n    return rowIndex >= 10;\n  }\n  if (rowsVisibilityMode === RUNS_VISIBILITY_MODE.FIRST_20_RUNS) {\n    return rowIndex >= 20;\n  }\n\n  return false;\n};\n\nexport const ExperimentLoggedModelListPageRowVisibilityContextProvider = ({\n  children,\n  visibilityMap = {},\n  visibilityMode,\n  setRowVisibilityMode,\n  toggleRowVisibility,\n}: {\n  visibilityMap?: Record<string, boolean>;\n  visibilityMode: RUNS_VISIBILITY_MODE;\n  children: React.ReactNode;\n  setRowVisibilityMode: (visibilityMode: RUNS_VISIBILITY_MODE) => void;\n  toggleRowVisibility: (rowUuid: string, rowIndex: number) => void;\n}) => {\n  const isRowHidden = useCallback(\n    (rowUuid: string, rowIndex: number) => isLoggedModelRowHidden(visibilityMode, rowUuid, rowIndex, visibilityMap),\n    [visibilityMap, visibilityMode],\n  );\n\n  const usingCustomVisibility = useMemo(() => Object.keys(visibilityMap).length > 0, [visibilityMap]);\n\n  const contextValue = useMemo(\n    () => ({ isRowHidden, setRowVisibilityMode, toggleRowVisibility, visibilityMode, usingCustomVisibility }),\n    [isRowHidden, setRowVisibilityMode, toggleRowVisibility, visibilityMode, usingCustomVisibility],\n  );\n\n  return (\n    <ExperimentLoggedModelListPageRowVisibilityContext.Provider value={contextValue}>\n      {children}\n    </ExperimentLoggedModelListPageRowVisibilityContext.Provider>\n  );\n};\n\nexport const useExperimentLoggedModelListPageRowVisibilityContext = () =>\n  useContext(ExperimentLoggedModelListPageRowVisibilityContext);\n","import { useDesignSystemTheme } from '@databricks/design-system';\nimport { Link } from '../../../common/utils/RoutingUtils';\nimport Routes from '../../routes';\nimport { LoggedModelProto } from '../../types';\nimport { getStableColorForRun } from '../../utils/RunNameUtils';\nimport { RunColorPill } from '../experiment-page/components/RunColorPill';\n\nexport const ExperimentLoggedModelTableNameCell = ({ data }: { data: LoggedModelProto }) => {\n  const { theme } = useDesignSystemTheme();\n  if (!data.info?.experiment_id || !data.info?.model_id) {\n    return <>{data.info?.name}</>;\n  }\n  return (\n    <div css={{ display: 'flex', alignItems: 'center', gap: theme.spacing.sm }}>\n      {/* TODO: consider how we should determine the color of the model */}\n      <RunColorPill color={getStableColorForRun(data.info.model_id)} />\n      <Link to={Routes.getExperimentLoggedModelDetailsPageRoute(data.info.experiment_id, data.info.model_id)}>\n        {data.info.name}\n      </Link>\n    </div>\n  );\n};\n","import { useMemo } from 'react';\n\nimport type { LoggedModelProto } from '../../types';\nimport { Overflow } from '@databricks/design-system';\nimport { ExperimentLoggedModelDatasetButton } from './ExperimentLoggedModelDatasetButton';\n\nexport const ExperimentLoggedModelTableDatasetCell = ({ data: loggedModel }: { data?: LoggedModelProto }) => {\n  const uniqueDatasets = useMemo(() => {\n    const allMetrics = loggedModel?.data?.metrics ?? [];\n    return allMetrics.reduce<{ dataset_name: string; dataset_digest: string; run_id: string | undefined }[]>(\n      (aggregate, { dataset_digest, dataset_name, run_id }) => {\n        if (\n          dataset_name &&\n          dataset_digest &&\n          !aggregate.find(\n            (dataset) => dataset.dataset_name === dataset_name && dataset.dataset_digest === dataset_digest,\n          )\n        ) {\n          aggregate.push({ dataset_name, dataset_digest, run_id });\n        }\n        return aggregate;\n      },\n      [],\n    );\n  }, [loggedModel]);\n\n  if (!uniqueDatasets.length) {\n    return <>-</>;\n  }\n\n  return (\n    <Overflow>\n      {uniqueDatasets.map(({ dataset_digest, dataset_name, run_id }) => (\n        <ExperimentLoggedModelDatasetButton\n          datasetName={dataset_name}\n          datasetDigest={dataset_digest}\n          runId={run_id ?? null}\n          key={[dataset_name, dataset_digest].join('.')}\n        />\n      ))}\n    </Overflow>\n  );\n};\n","import { GraphQLExperimentRun, LoggedModelProto } from '../../types';\nimport { Link } from '../../../common/utils/RoutingUtils';\nimport Routes from '../../routes';\n\ninterface LoggedModelWithSourceRun extends LoggedModelProto {\n  sourceRun?: GraphQLExperimentRun;\n}\n\nexport const ExperimentLoggedModelTableSourceRunCell = ({ data }: { data: LoggedModelWithSourceRun }) => {\n  if (data.info?.experiment_id && data.info?.source_run_id) {\n    return (\n      <Link to={Routes.getRunPageRoute(data.info?.experiment_id, data.info?.source_run_id)} target=\"_blank\">\n        {data.sourceRun?.info?.runName ?? data.info?.source_run_id}\n      </Link>\n    );\n  }\n  return data.info?.source_run_id || <>-</>;\n};\n","import { Button, DashIcon, DropdownMenu, useDesignSystemTheme, VisibleOffIcon } from '@databricks/design-system';\nimport { type LoggedModelProto } from '../../types';\nimport { useExperimentLoggedModelListPageRowVisibilityContext } from './hooks/useExperimentLoggedModelListPageRowVisibility';\nimport { ReactComponent as VisibleFillIcon } from '../../../common/static/icon-visible-fill.svg';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { RUNS_VISIBILITY_MODE } from '../experiment-page/models/ExperimentPageUIState';\nimport { coerceToEnum } from '@databricks/web-shared/utils';\n\nexport const ExperimentLoggedModelActionsCell = ({ data, rowIndex }: { data: LoggedModelProto; rowIndex: number }) => {\n  const { isRowHidden, toggleRowVisibility } = useExperimentLoggedModelListPageRowVisibilityContext();\n  const isHidden = isRowHidden(data.info?.model_id ?? '', rowIndex);\n  const { theme } = useDesignSystemTheme();\n  return (\n    <Button\n      componentId=\"mlflow.logged_model.list_page.row_visibility_toggle\"\n      type=\"link\"\n      onClick={() => toggleRowVisibility(data.info?.model_id ?? '', rowIndex)}\n      icon={\n        isHidden ? (\n          <VisibleOffIcon css={{ color: theme.colors.textSecondary }} />\n        ) : (\n          <VisibleFillIcon css={{ color: theme.colors.textSecondary }} />\n        )\n      }\n    />\n  );\n};\n\nexport const ExperimentLoggedModelActionsHeaderCell = () => {\n  const intl = useIntl();\n  const { visibilityMode, usingCustomVisibility, setRowVisibilityMode } =\n    useExperimentLoggedModelListPageRowVisibilityContext();\n  const { theme } = useDesignSystemTheme();\n  return (\n    <DropdownMenu.Root modal={false}>\n      <DropdownMenu.Trigger asChild>\n        <Button\n          componentId=\"mlflow.logged_model.list_page.global_row_visibility_toggle\"\n          type=\"link\"\n          data-testid=\"experiment-view-runs-visibility-column-header\"\n          aria-label={intl.formatMessage({\n            defaultMessage: 'Toggle visibility of rows',\n            description:\n              'Accessibility label for the button that toggles visibility of rows in the experiment view logged models compare mode',\n          })}\n        >\n          {visibilityMode === RUNS_VISIBILITY_MODE.HIDEALL ? (\n            <VisibleOffIcon css={{ color: theme.colors.textSecondary }} />\n          ) : (\n            <VisibleFillIcon css={{ color: theme.colors.textSecondary }} />\n          )}\n        </Button>\n      </DropdownMenu.Trigger>\n\n      <DropdownMenu.Content>\n        <DropdownMenu.RadioGroup\n          componentId=\"mlflow.logged_model.list_page.global_row_visibility_toggle.options\"\n          value={visibilityMode}\n          onValueChange={(e) =>\n            setRowVisibilityMode(coerceToEnum(RUNS_VISIBILITY_MODE, e, RUNS_VISIBILITY_MODE.FIRST_10_RUNS))\n          }\n        >\n          <DropdownMenu.RadioItem value={RUNS_VISIBILITY_MODE.FIRST_10_RUNS}>\n            {/* Dropdown menu does not support indeterminate state, so we're doing it manually */}\n            <DropdownMenu.ItemIndicator>{usingCustomVisibility ? <DashIcon /> : null}</DropdownMenu.ItemIndicator>\n            <FormattedMessage\n              defaultMessage=\"Show first 10\"\n              description=\"Menu option for showing only 10 first runs in the experiment view runs compare mode\"\n            />\n          </DropdownMenu.RadioItem>\n          <DropdownMenu.RadioItem value={RUNS_VISIBILITY_MODE.FIRST_20_RUNS}>\n            <DropdownMenu.ItemIndicator>{usingCustomVisibility ? <DashIcon /> : null}</DropdownMenu.ItemIndicator>\n            <FormattedMessage\n              defaultMessage=\"Show first 20\"\n              description=\"Menu option for showing only 10 first runs in the experiment view runs compare mode\"\n            />\n          </DropdownMenu.RadioItem>\n          <DropdownMenu.RadioItem value={RUNS_VISIBILITY_MODE.SHOWALL}>\n            <DropdownMenu.ItemIndicator>{usingCustomVisibility ? <DashIcon /> : null}</DropdownMenu.ItemIndicator>\n            <FormattedMessage\n              defaultMessage=\"Show all runs\"\n              description=\"Menu option for revealing all hidden runs in the experiment view runs compare mode\"\n            />\n          </DropdownMenu.RadioItem>\n          <DropdownMenu.RadioItem value={RUNS_VISIBILITY_MODE.HIDEALL}>\n            <DropdownMenu.ItemIndicator>{usingCustomVisibility ? <DashIcon /> : null}</DropdownMenu.ItemIndicator>\n            <FormattedMessage\n              defaultMessage=\"Hide all runs\"\n              description=\"Menu option for revealing all hidden runs in the experiment view runs compare mode\"\n            />\n          </DropdownMenu.RadioItem>\n        </DropdownMenu.RadioGroup>\n      </DropdownMenu.Content>\n    </DropdownMenu.Root>\n  );\n};\n","import { GraphQLExperimentRun, LoggedModelProto } from '../../types';\nimport { Link } from '../../../common/utils/RoutingUtils';\nimport { useExperimentLoggedModelRegisteredVersions } from './hooks/useExperimentLoggedModelRegisteredVersions';\nimport { isEmpty } from 'lodash';\nimport React from 'react';\nimport { Overflow, Tag, useDesignSystemTheme } from '@databricks/design-system';\nimport { ReactComponent as RegisteredModelOkIcon } from '../../../common/static/registered-model-grey-ok.svg';\n\nexport const ExperimentLoggedModelTableRegisteredModelsCell = ({ data }: { data: LoggedModelProto }) => {\n  const { theme } = useDesignSystemTheme();\n  const modelVersions = useExperimentLoggedModelRegisteredVersions({ loggedModels: [data] });\n\n  if (!isEmpty(modelVersions)) {\n    return (\n      <Overflow>\n        {modelVersions.map((modelVersion) => (\n          <React.Fragment key={modelVersion.link}>\n            <Link to={modelVersion.link} css={{ display: 'flex', alignItems: 'center', gap: theme.spacing.xs }}>\n              <RegisteredModelOkIcon />\n              {modelVersion.displayedName}\n              <Tag\n                componentId=\"mlflow.logged_model.list.registered_model_cell_version_tag\"\n                css={{ marginRight: 0, verticalAlign: 'middle' }}\n              >\n                v{modelVersion.version}\n              </Tag>\n            </Link>\n          </React.Fragment>\n        ))}\n      </Overflow>\n    );\n  }\n  return '-';\n};\n","import { useMemo, useState } from 'react';\n\nimport type { LoggedModelProto } from '../../types';\nimport { Overflow, Spinner, TableIcon, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { ExperimentLoggedModelDatasetButton } from './ExperimentLoggedModelDatasetButton';\nimport { ColumnGroup } from '@ag-grid-community/core';\nimport { useExperimentLoggedModelOpenDatasetDetails } from './hooks/useExperimentLoggedModelOpenDatasetDetails';\nimport { FormattedMessage } from 'react-intl';\n\nexport const createLoggedModelDatasetColumnGroupId = (datasetName?: string, datasetDigest?: string, runId?: string) =>\n  `metrics.${JSON.stringify([datasetName, datasetDigest, runId])}`;\nconst parseLoggedModelDatasetColumnGroupId = (groupId: string) => {\n  try {\n    const match = groupId.match(/metrics\\.(.+)/);\n    if (!match) {\n      return null;\n    }\n    const datasetHash = match[1];\n    const [datasetName, datasetDigest, runId] = JSON.parse(datasetHash);\n    if (!datasetName || !datasetDigest) {\n      return null;\n    }\n    return { datasetName, datasetDigest, runId };\n  } catch {\n    return null;\n  }\n};\n\nexport const ExperimentLoggedModelTableDatasetColHeader = ({ columnGroup }: { columnGroup: ColumnGroup }) => {\n  const { onDatasetClicked } = useExperimentLoggedModelOpenDatasetDetails();\n  const { theme } = useDesignSystemTheme();\n  const [loading, setLoading] = useState(false);\n\n  const datasetObject = useMemo(() => {\n    try {\n      const groupId = columnGroup.getGroupId();\n      return groupId ? parseLoggedModelDatasetColumnGroupId(groupId) : null;\n    } catch {\n      return null;\n    }\n  }, [columnGroup]);\n  if (!datasetObject) {\n    return (\n      <FormattedMessage\n        defaultMessage=\"No dataset\"\n        description=\"Label for the metrics column group header that are not grouped by dataset\"\n      />\n    );\n  }\n  return (\n    <span css={{ display: 'flex', alignItems: 'center', gap: theme.spacing.xs }}>\n      Dataset:{' '}\n      <Typography.Link\n        css={{\n          '.anticon': {\n            fontSize: theme.general.iconFontSize,\n          },\n          fontSize: theme.typography.fontSizeBase,\n          fontWeight: 'normal',\n          display: 'flex',\n          alignItems: 'center',\n          gap: theme.spacing.xs,\n        }}\n        role=\"button\"\n        componentId=\"mlflow.logged_model.list.metric_by_dataset_column_header\"\n        onClick={async () => {\n          setLoading(true);\n          try {\n            await onDatasetClicked({\n              datasetName: datasetObject.datasetName,\n              datasetDigest: datasetObject.datasetDigest,\n              runId: datasetObject.runId,\n            });\n          } finally {\n            setLoading(false);\n          }\n        }}\n      >\n        {loading ? <Spinner size=\"small\" /> : <TableIcon />}\n        {datasetObject.datasetName} (#{datasetObject.datasetDigest})\n      </Typography.Link>\n    </span>\n  );\n};\n","import { LoggedModelProto } from '../../types';\nimport { ExperimentLoggedModelSourceBox } from './ExperimentLoggedModelSourceBox';\n\n/**\n * A cell renderer/wrapper component for displaying the model's source in logged models table.\n */\nexport const ExperimentLoggedModelTableSourceCell = ({ data }: { data: LoggedModelProto }) => {\n  return <ExperimentLoggedModelSourceBox loggedModel={data} />;\n};\n","import type { ColDef, ColGroupDef } from '@ag-grid-community/core';\nimport { useMemo, useRef } from 'react';\nimport { useIntl } from 'react-intl';\nimport { ExperimentLoggedModelTableNameCell } from '../ExperimentLoggedModelTableNameCell';\nimport { ExperimentLoggedModelTableDateCell } from '../ExperimentLoggedModelTableDateCell';\nimport { ExperimentLoggedModelStatusIndicator } from '../ExperimentLoggedModelStatusIndicator';\nimport { ExperimentLoggedModelTableDatasetCell } from '../ExperimentLoggedModelTableDatasetCell';\nimport { LoggedModelProto } from '../../../types';\nimport { compact, isEqual, values, uniq, orderBy } from 'lodash';\nimport { ExperimentLoggedModelTableSourceRunCell } from '../ExperimentLoggedModelTableSourceRunCell';\nimport {\n  ExperimentLoggedModelActionsCell,\n  ExperimentLoggedModelActionsHeaderCell,\n} from '../ExperimentLoggedModelActionsCell';\nimport { ExperimentLoggedModelTableRegisteredModelsCell } from '../ExperimentLoggedModelTableRegisteredModelsCell';\nimport {\n  createLoggedModelDatasetColumnGroupId,\n  ExperimentLoggedModelTableDatasetColHeader,\n} from '../ExperimentLoggedModelTableDatasetColHeader';\nimport { ExperimentLoggedModelTableSourceCell } from '../ExperimentLoggedModelTableSourceCell';\n\n/**\n * Utility hook that memoizes value based on deep comparison.\n * Helps to regenerate columns only if underlying dependencies change.\n */\nconst useMemoizeColumns = <T,>(factory: () => T, deps: unknown[], disable?: boolean): T => {\n  const ref = useRef<{ deps: unknown[]; value: T }>();\n\n  if (!ref.current || (!isEqual(deps, ref.current.deps) && !disable)) {\n    ref.current = { deps, value: factory() };\n  }\n\n  return ref.current.value;\n};\n\nexport enum ExperimentLoggedModelListPageKnownColumnGroups {\n  Attributes = 'attributes',\n  Params = 'params',\n}\n\nexport enum ExperimentLoggedModelListPageKnownColumns {\n  RelationshipType = 'relationship_type',\n  Step = 'step',\n  Select = 'select',\n  Name = 'name',\n  Status = 'status',\n  CreationTime = 'creation_time',\n  Source = 'source',\n  SourceRun = 'source_run_id',\n  RegisteredModels = 'registered_models',\n  Dataset = 'dataset',\n}\n\nexport const LOGGED_MODEL_LIST_METRIC_COLUMN_PREFIX = 'metrics.';\n\nexport const ExperimentLoggedModelListPageStaticColumns: string[] = [\n  ExperimentLoggedModelListPageKnownColumns.Select,\n  ExperimentLoggedModelListPageKnownColumns.Name,\n  ExperimentLoggedModelListPageKnownColumns.CreationTime,\n];\n\nconst createDatasetHash = (datasetName?: string, datasetDigest?: string) => {\n  if (!datasetName || !datasetDigest) {\n    return '';\n  }\n  return JSON.stringify([datasetName, datasetDigest]);\n};\n\n// Creates a metric column ID based on the metric key and optional dataset name and digest.\n// The ID format is:\n// - `metrics.<datasetHash>.<metricKey>` for metrics grouped by dataset\n// - `metrics.<metricKey>` for ungrouped metrics\n// The dataset hash is created using the dataset name and digest: [datasetName, datasetDigest]\nconst createLoggedModelMetricOrderByColumnId = (metricKey: string, datasetName?: string, datasetDigest?: string) => {\n  const isUngroupedMetricColumn = !datasetName || !datasetDigest;\n  if (isUngroupedMetricColumn) {\n    return `${LOGGED_MODEL_LIST_METRIC_COLUMN_PREFIX}${metricKey}`;\n  }\n  return `${LOGGED_MODEL_LIST_METRIC_COLUMN_PREFIX}${createDatasetHash(datasetName, datasetDigest)}.${metricKey}`;\n};\n\n// Parse `metrics.<datasetHash>.<metricKey>` format\n// and return dataset name, digest and metric key.\n// Make it fall back to default values on error.\nexport const parseLoggedModelMetricOrderByColumnId = (metricColumnId: string) => {\n  const match = metricColumnId.match(/metrics\\.(.*?)(?:\\.(.*))?$/);\n  try {\n    if (match) {\n      const [, datasetHashOrMetricKey, metricKey] = match;\n      if (!metricKey) {\n        return { datasetName: undefined, datasetDigest: undefined, metricKey: datasetHashOrMetricKey };\n      }\n      const [datasetName, datasetDigest] = JSON.parse(datasetHashOrMetricKey);\n      return { datasetName, datasetDigest, metricKey };\n    }\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.error('Failed to parse metric column ID', error);\n  }\n  return { datasetName: undefined, datasetDigest: undefined, metricKey: metricColumnId };\n};\n\n/**\n * Iterate through all logged models and metrics grouped by datasets.\n * Each group is identified by a hashed combination of dataset name and digest.\n * For metrics without dataset, use empty string as a key.\n * The result is a map of dataset hashes to an object containing the dataset name, digest, metrics\n * and the first run ID found for that dataset.\n */\nconst extractMetricGroups = (loggedModels: LoggedModelProto[]) => {\n  const result: Record<string, { datasetDigest?: string; datasetName?: string; runId?: string; metrics: string[] }> =\n    {};\n  for (const loggedModel of orderBy(loggedModels, (model) => model.info?.model_id)) {\n    for (const metric of loggedModel?.data?.metrics ?? []) {\n      if (!metric.key) {\n        continue;\n      }\n      const datasetHash =\n        metric.dataset_name && metric.dataset_digest\n          ? createDatasetHash(metric.dataset_name, metric.dataset_digest)\n          : '';\n\n      if (!result[datasetHash]) {\n        result[datasetHash] = {\n          datasetName: metric.dataset_name,\n          datasetDigest: metric.dataset_digest,\n          // We use first found run ID, as it will be used for dataset fetching.\n          runId: metric.run_id,\n          metrics: [],\n        };\n      }\n      if (result[datasetHash] && !result[datasetHash].metrics.includes(metric.key)) {\n        result[datasetHash].metrics.push(metric.key);\n      }\n    }\n  }\n  return result;\n};\n\nconst defaultColumnSet = [\n  ExperimentLoggedModelListPageKnownColumns.Name,\n  ExperimentLoggedModelListPageKnownColumns.Status,\n  ExperimentLoggedModelListPageKnownColumns.CreationTime,\n  ExperimentLoggedModelListPageKnownColumns.Source,\n  ExperimentLoggedModelListPageKnownColumns.SourceRun,\n  ExperimentLoggedModelListPageKnownColumns.RegisteredModels,\n  ExperimentLoggedModelListPageKnownColumns.Dataset,\n];\n\n/**\n * Returns the columns for the logged model list table.\n * Metric column IDs follow the structure:\n * - `metrics.<datasetName>.<metricKey>` for metrics grouped by dataset\n * - `metrics.<metricKey>` for ungrouped metrics\n */\nexport const useExperimentLoggedModelListPageTableColumns = ({\n  columnVisibility = {},\n  supportedAttributeColumnKeys = defaultColumnSet,\n  loggedModels = [],\n  disablePinnedColumns = false,\n  disableOrderBy = false,\n  enableSortingByMetrics,\n  orderByColumn,\n  orderByAsc,\n  isLoading,\n}: {\n  loggedModels?: LoggedModelProto[];\n  columnVisibility?: Record<string, boolean>;\n  disablePinnedColumns?: boolean;\n  supportedAttributeColumnKeys?: string[];\n  disableOrderBy?: boolean;\n  enableSortingByMetrics?: boolean;\n  orderByColumn?: string;\n  orderByAsc?: boolean;\n  isLoading?: boolean;\n}) => {\n  const datasetMetricGroups = useMemo(() => extractMetricGroups(loggedModels), [loggedModels]);\n\n  const parameterKeys = useMemo(\n    () => compact(uniq(loggedModels.map((loggedModel) => loggedModel?.data?.params?.map((param) => param.key)).flat())),\n    [loggedModels],\n  );\n\n  const intl = useIntl();\n\n  return useMemoizeColumns(\n    () => {\n      const attributeColumns: ColDef[] = [\n        {\n          colId: ExperimentLoggedModelListPageKnownColumns.RelationshipType,\n          headerName: 'Type',\n          sortable: false,\n          valueGetter: ({ data }) => {\n            return data.direction === 'input'\n              ? intl.formatMessage({\n                  defaultMessage: 'Input',\n                  description:\n                    'Label indicating that the logged model was the input of the experiment run. Displayed in logged model list table on the run page.',\n                })\n              : intl.formatMessage({\n                  defaultMessage: 'Output',\n                  description:\n                    'Label indicating that the logged model was the output of the experiment run Displayed in logged model list table on the run page.',\n                });\n          },\n          pinned: !disablePinnedColumns ? 'left' : undefined,\n          resizable: false,\n          width: 100,\n        },\n        {\n          colId: ExperimentLoggedModelListPageKnownColumns.Step,\n          headerName: intl.formatMessage({\n            defaultMessage: 'Step',\n            description:\n              'Header title for the step column in the logged model list table. Step indicates the run step where the model was logged.',\n          }),\n          field: 'step',\n          pinned: !disablePinnedColumns ? 'left' : undefined,\n          resizable: false,\n          width: 60,\n        },\n        {\n          headerName: intl.formatMessage({\n            defaultMessage: 'Model name',\n            description: 'Header title for the model name column in the logged model list table',\n          }),\n          colId: ExperimentLoggedModelListPageKnownColumns.Name,\n          cellRenderer: ExperimentLoggedModelTableNameCell,\n          resizable: true,\n          pinned: !disablePinnedColumns ? 'left' : undefined,\n          minWidth: 140,\n          flex: 1,\n        },\n        {\n          headerName: intl.formatMessage({\n            defaultMessage: 'Status',\n            description: 'Header title for the status column in the logged model list table',\n          }),\n          cellRenderer: ExperimentLoggedModelStatusIndicator,\n          colId: ExperimentLoggedModelListPageKnownColumns.Status,\n          pinned: !disablePinnedColumns ? 'left' : undefined,\n          width: 140,\n          resizable: false,\n        },\n        {\n          headerName: intl.formatMessage({\n            defaultMessage: 'Created',\n            description: 'Header title for the creation timestamp column in the logged model list table',\n          }),\n          field: 'info.creation_timestamp_ms',\n          colId: ExperimentLoggedModelListPageKnownColumns.CreationTime,\n          cellRenderer: ExperimentLoggedModelTableDateCell,\n          resizable: true,\n          pinned: !disablePinnedColumns ? 'left' : undefined,\n          sortable: !disableOrderBy,\n          sortingOrder: ['desc', 'asc'],\n          comparator: () => 0,\n        },\n        {\n          headerName: intl.formatMessage({\n            defaultMessage: 'Logged from',\n            description: \"Header title for the 'Logged from' column in the logged model list table\",\n          }),\n          colId: ExperimentLoggedModelListPageKnownColumns.Source,\n          cellRenderer: ExperimentLoggedModelTableSourceCell,\n          resizable: true,\n        },\n        {\n          headerName: intl.formatMessage({\n            defaultMessage: 'Source run',\n            description: 'Header title for the source run column in the logged model list table',\n          }),\n          colId: ExperimentLoggedModelListPageKnownColumns.SourceRun,\n          cellRenderer: ExperimentLoggedModelTableSourceRunCell,\n          resizable: true,\n        },\n        {\n          headerName: intl.formatMessage({\n            defaultMessage: 'Registered models',\n            description: 'Header title for the registered models column in the logged model list table',\n          }),\n          colId: ExperimentLoggedModelListPageKnownColumns.RegisteredModels,\n          cellRenderer: ExperimentLoggedModelTableRegisteredModelsCell,\n          resizable: true,\n        },\n\n        {\n          headerName: intl.formatMessage({\n            defaultMessage: 'Dataset',\n            description: 'Header title for the dataset column in the logged model list table',\n          }),\n          colId: ExperimentLoggedModelListPageKnownColumns.Dataset,\n          cellRenderer: ExperimentLoggedModelTableDatasetCell,\n          resizable: true,\n        },\n      ];\n\n      const columnDefs: ColGroupDef[] = [\n        {\n          groupId: 'attributes',\n          headerName: intl.formatMessage({\n            defaultMessage: 'Model attributes',\n            description: 'Header title for the model attributes section of the logged model list table',\n          }),\n          children: attributeColumns.filter(\n            (column) => !column.colId || supportedAttributeColumnKeys.includes(column.colId),\n          ),\n        },\n      ];\n\n      const metricGroups = orderBy(values(datasetMetricGroups), (group) => group?.datasetName);\n\n      metricGroups.forEach(({ datasetDigest, datasetName, runId, metrics }) => {\n        const isUngroupedMetricColumn = !datasetName || !datasetDigest;\n        const headerName = isUngroupedMetricColumn ? '' : `${datasetName} (#${datasetDigest})`;\n        columnDefs.push({\n          headerName,\n          groupId: createLoggedModelDatasetColumnGroupId(datasetName, datasetDigest, runId),\n          headerGroupComponent: ExperimentLoggedModelTableDatasetColHeader,\n          children:\n            metrics?.map((metricKey) => {\n              const metricColumnId = createLoggedModelMetricOrderByColumnId(metricKey, datasetName, datasetDigest);\n              return {\n                headerName: metricKey,\n                hide: columnVisibility[metricColumnId] === false,\n                colId: metricColumnId,\n                valueGetter: ({ data }: { data: LoggedModelProto }) => {\n                  // NB: Looping through metric values might not seem to be most efficient, but considering the number\n                  // metrics we render on the screen it might be more efficient than creating a lookup table.\n                  // Might be revisited if performance becomes an issue.\n                  for (const metric of data.data?.metrics ?? []) {\n                    if (metric.key === metricKey) {\n                      if (metric.dataset_name === datasetName || (!datasetName && !metric.dataset_name)) {\n                        return metric.value;\n                      }\n                    }\n                  }\n                  return undefined;\n                },\n                resizable: true,\n                sortable: enableSortingByMetrics && !disableOrderBy,\n                sortingOrder: ['desc', 'asc'],\n                comparator: () => 0,\n                sort: enableSortingByMetrics && metricColumnId === orderByColumn ? (orderByAsc ? 'asc' : 'desc') : null,\n              };\n            }) ?? [],\n        });\n      });\n\n      if (parameterKeys.length > 0) {\n        columnDefs.push({\n          headerName: intl.formatMessage({\n            defaultMessage: 'Parameters',\n            description: 'Header title for the parameters section of the logged model list table',\n          }),\n          groupId: 'params',\n          children: parameterKeys.map((paramKey) => ({\n            headerName: paramKey,\n            colId: `params.${paramKey}`,\n            hide: columnVisibility[`params.${paramKey}`] === false,\n            valueGetter: ({ data }: { data: LoggedModelProto }) => {\n              for (const param of data.data?.params ?? []) {\n                if (param.key === paramKey) {\n                  return param.value;\n                }\n              }\n              return undefined;\n            },\n            resizable: true,\n          })),\n        });\n      }\n\n      const compactColumnDefs = [\n        {\n          headerCheckboxSelection: false,\n          checkboxSelection: false,\n          width: 40,\n          maxWidth: 40,\n          resizable: false,\n          colId: ExperimentLoggedModelListPageKnownColumns.Select,\n          cellRenderer: ExperimentLoggedModelActionsCell,\n          headerComponent: ExperimentLoggedModelActionsHeaderCell,\n          flex: undefined,\n        },\n        {\n          headerName: intl.formatMessage({\n            defaultMessage: 'Model name',\n            description: 'Header title for the model name column in the logged model list table',\n          }),\n          colId: ExperimentLoggedModelListPageKnownColumns.Name,\n          cellRenderer: ExperimentLoggedModelTableNameCell,\n          resizable: true,\n          flex: 1,\n        },\n      ];\n\n      return { columnDefs, compactColumnDefs };\n    },\n    [datasetMetricGroups, parameterKeys, supportedAttributeColumnKeys],\n    // Do not recreate column definitions if logged models are being loaded, e.g. due to changing sort order\n    isLoading,\n  );\n};\n"],"names":["AgGridFontInjector","domElementReference","useRef","useEffect","current","getRootNode","document","injectedStyleElement","createElement","className","appendChild","createTextNode","head","remove","_jsx","ref","props","_jsxs","_Fragment","children","AgGridReact","modules","ClientSideRowModelModule","METRIC_AGGREGATE_GROUP_ID","defaultExpandedTreeGroups","ExperimentLoggedModelListPageKnownColumnGroups","Attributes","_ref4","name","styles","ExperimentLoggedModelListPageColumnSelector","_ref","onUpdateColumns","columnVisibility","columnDefs","disabled","customTrigger","intl","useIntl","leafColumnIds","treeData","useMemo","_groupedColumnDefinit","groupedColumnDefinitions","attributeColumnGroup","find","col","groupId","_attributeColumnGroup","push","filter","_ref2","colId","ExperimentLoggedModelListPageStaticColumns","includes","metricColumnGroups","_col$groupId","startsWith","LOGGED_MODEL_LIST_METRIC_COLUMN_PREFIX","map","headerName","formatMessage","id","defaultMessage","length","paramColumnGroup","Params","buildDuboisTreeBranch","_ref3","_col$groupId2","_col$headerName","_col$children$map","_col$children","key","title","compact","DropdownMenu","Root","Trigger","asChild","Button","componentId","icon","ColumnsIcon","FormattedMessage","Content","css","Tree","mode","showLine","defaultExpandedKeys","defaultCheckedKeys","onCheck","checkedKeys","keys","checked","LoggedModelsListPageSortableColumns","ExperimentLoggedModelListPageKnownColumns","CreationTime","useLoggedModelsListPageState","state","dispatch","useReducer","action","type","orderByColumn","orderByAsc","selectedFilterDatasets","_state$selectedFilter","_state$selectedFilter2","_state$selectedFilter3","some","dataset","isEqual","visibilityMode","rowVisibilityMode","rowVisibilityMap","rowUuid","undefined","rowIndex","_state$rowVisibilityM","currentHidden","isLoggedModelRowHidden","first","RUNS_VISIBILITY_MODE","FIRST_10_RUNS","setOrderBy","useCallback","setColumnVisibility","setRowVisibilityMode","toggleRowVisibility","toggleDataset","clearSelectedDatasets","deferredState","useSafeDeferredValue","searchQuery","updateSearchQuery","useState","isFilteringActive","Boolean","isEmpty","ExperimentLoggedModelListPageTableContext","createContext","ExperimentLoggedModelListPageTableContextProvider","loadMoreResults","moreResultsAvailable","isLoadingMore","contextValue","Provider","value","EXAMPLE_CODE","trim","ExperimentLoggedModelListPageTableEmpty","displayShowExampleButton","badRequestError","theme","useDesignSystemTheme","isCodeExampleVisible","setIsCodeExampleVisible","_css","inset","top","general","heightBase","spacing","lg","position","display","justifyContent","alignItems","minHeight","Empty","description","message","values","link","chunks","Typography","Link","openInNewTab","href","getMlflow3DocsLink","image","DangerIcon","button","onClick","Modal","size","visible","onCancel","okText","onOk","Text","code","CodeSnippet","language","Spacer","LoadMoreRowSymbol","Symbol","rowDataGetter","_data$info$model_id","_data$info","data","info","model_id","ExperimentLoggedModelListPageTableImpl","loggedModels","isLoading","onLoadMore","onOrderByChange","relatedRunsData","disableLoadMore","useExperimentAgGridTableStyles","usingCustomHeaderComponent","columnApiRef","loggedModelsWithSourceRuns","loggedModel","sourceRun","run","_run$info","_loggedModel$info","runUuid","source_run_id","loggedModelsListWithLoadMore","sortChangedHandler","event","sortedColumn","columnApi","getColumnState","sort","updateSortIndicator","field","asc","_columnApiRef$current","column","getColumn","_columnApiRef$current2","_columnApiRef$current3","currentSortedColumnId","_columnApiRef$current4","_columnApiRef$current5","getColId","setSort","updateColumnVisibility","newColumnVisibility","_columnApiRef$current6","_columnApiRef$current7","getAllColumns","_columnApiRef$current8","setColumnVisible","containsGroupedColumns","containerElement","cellMouseOverHandler","cellMouseOutHandler","useRunsHighlightTableRow","overflow","flex","borderTop","colors","border","paddingLeft","sm","join","MLFlowAgGrid","rowData","rowHeight","rowSelection","suppressRowClickSelection","suppressMovableColumns","getRowId","suppressLoadingOverlay","suppressNoRowsOverlay","suppressColumnMoveAnimation","isFullWidthRow","rowNode","fullWidthCellRenderer","LoadMoreRow","onSortChanged","onGridReady","onCellMouseOver","onCellMouseOut","paddingTop","md","paddingRight","TableSkeleton","lines","label","useContext","pointerEvents","userSelect","padding","loading","ExperimentLoggedModelListPageTable","React","ExperimentLoggedModelListPageRowVisibilityContext","isRowHidden","usingCustomVisibility","rowsVisibilityMode","runsVisibilityMap","isUndefined","HIDEALL","FIRST_20_RUNS","ExperimentLoggedModelListPageRowVisibilityContextProvider","visibilityMap","Object","useExperimentLoggedModelListPageRowVisibilityContext","ExperimentLoggedModelTableNameCell","_data$info2","_data$info3","experiment_id","gap","RunColorPill","color","getStableColorForRun","to","Routes","getExperimentLoggedModelDetailsPageRoute","ExperimentLoggedModelTableDatasetCell","uniqueDatasets","_loggedModel$data$met","_loggedModel$data","metrics","reduce","aggregate","dataset_digest","dataset_name","run_id","Overflow","ExperimentLoggedModelDatasetButton","datasetName","datasetDigest","runId","ExperimentLoggedModelTableSourceRunCell","_data$info6","_data$info4","_data$sourceRun$info$","_data$sourceRun","_data$sourceRun$info","_data$info5","getRunPageRoute","target","runName","ExperimentLoggedModelActionsCell","isHidden","_data$info$model_id2","VisibleOffIcon","textSecondary","VisibleFillIcon","ExperimentLoggedModelActionsHeaderCell","modal","RadioGroup","onValueChange","e","coerceToEnum","RadioItem","ItemIndicator","DashIcon","SHOWALL","ExperimentLoggedModelTableRegisteredModelsCell","modelVersions","useExperimentLoggedModelRegisteredVersions","modelVersion","xs","RegisteredModelOkIcon","displayedName","Tag","version","createLoggedModelDatasetColumnGroupId","JSON","stringify","ExperimentLoggedModelTableDatasetColHeader","columnGroup","onDatasetClicked","useExperimentLoggedModelOpenDatasetDetails","setLoading","datasetObject","getGroupId","match","datasetHash","parse","parseLoggedModelDatasetColumnGroupId","fontSize","iconFontSize","typography","fontSizeBase","fontWeight","role","async","Spinner","TableIcon","ExperimentLoggedModelTableSourceCell","ExperimentLoggedModelSourceBox","Select","Name","createDatasetHash","parseLoggedModelMetricOrderByColumnId","metricColumnId","datasetHashOrMetricKey","metricKey","error","console","defaultColumnSet","Status","Source","SourceRun","RegisteredModels","Dataset","useExperimentLoggedModelListPageTableColumns","supportedAttributeColumnKeys","disablePinnedColumns","disableOrderBy","enableSortingByMetrics","datasetMetricGroups","result","orderBy","model","_model$info","metric","extractMetricGroups","parameterKeys","uniq","_loggedModel$data2","_loggedModel$data2$pa","params","param","flat","useMemoizeColumns","factory","deps","disable","attributeColumns","RelationshipType","sortable","valueGetter","direction","pinned","resizable","width","Step","cellRenderer","minWidth","ExperimentLoggedModelStatusIndicator","ExperimentLoggedModelTableDateCell","sortingOrder","comparator","group","forEach","_metrics$map","headerGroupComponent","createLoggedModelMetricOrderByColumnId","hide","_data$data$metrics","_data$data","paramKey","_ref5","_data$data$params","_data$data2","compactColumnDefs","headerCheckboxSelection","checkboxSelection","maxWidth","headerComponent"],"sourceRoot":""}