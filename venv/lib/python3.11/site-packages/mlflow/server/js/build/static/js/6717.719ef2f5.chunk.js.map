{"version":3,"file":"static/js/6717.719ef2f5.chunk.js","mappings":"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","sources":["experiment-tracking/components/run-page/RunViewArtifactTab.tsx","experiment-tracking/components/run-page/useRunViewActiveTab.tsx","experiment-tracking/components/run-page/RunViewModeSwitch.tsx","experiment-tracking/components/run-page/RunViewHeaderRegisterModelButton.tsx","experiment-tracking/components/run-page/RunViewHeader.tsx","experiment-tracking/components/run-page/overview/RunViewStatusBox.tsx","experiment-tracking/components/run-page/overview/RunViewUserLinkBox.tsx","experiment-tracking/components/run-page/overview/RunViewMetricsTable.tsx","experiment-tracking/components/run-page/overview/RunViewDatasetBox.tsx","experiment-tracking/components/run-page/overview/RunViewParentRunBox.tsx","experiment-tracking/components/run-page/overview/RunViewTagsBox.tsx","experiment-tracking/components/run-page/overview/RunViewDescriptionBox.tsx","experiment-tracking/components/run-page/overview/RunViewRegisteredModelsBox.tsx","experiment-tracking/pages/prompts/hooks/usePromptVersionsForRunQuery.tsx","experiment-tracking/components/run-page/overview/RunViewRegisteredPromptsBox.tsx","experiment-tracking/components/run-page/overview/RunViewLoggedModelsBox.tsx","experiment-tracking/components/run-page/overview/RunViewSourceBox.tsx","experiment-tracking/components/run-page/overview/RunViewLoggedModelsTable.tsx","experiment-tracking/hooks/logged-models/useCombinedRunInputsOutputsModels.tsx","experiment-tracking/components/run-page/overview/RunViewDatasetBoxV2.tsx","experiment-tracking/components/run-page/hooks/useRunDetailsPageOverviewSectionsV2.tsx","experiment-tracking/components/run-page/RunViewOverview.tsx","experiment-tracking/components/RunNotFoundView.tsx","experiment-tracking/components/run-page/RunViewChartTooltipBody.tsx","experiment-tracking/components/run-page/RunViewMetricCharts.tsx","experiment-tracking/components/run-page/RunViewTracesTab.tsx","experiment-tracking/components/experiment-page/hooks/useLoggedModelsForExperimentRun.tsx","experiment-tracking/components/run-page/RunPage.tsx","common/components/PageContainer.tsx","experiment-tracking/components/NotFoundPage.tsx","experiment-tracking/pages/prompts/api.ts","experiment-tracking/pages/prompts/utils.ts"],"sourcesContent":["import { useDesignSystemTheme } from '@databricks/design-system';\nimport type { KeyValueEntity } from '../../types';\nimport ArtifactPage from '../ArtifactPage';\nimport { useMediaQuery } from '@databricks/web-shared/hooks';\nimport { UseGetRunQueryResponseOutputs } from './hooks/useGetRunQuery';\n\n/**\n * A run page tab containing the artifact browser\n */\nexport const RunViewArtifactTab = ({\n  runTags,\n  experimentId,\n  runOutputs,\n  artifactUri,\n  runUuid,\n}: {\n  runUuid: string;\n  experimentId: string;\n  artifactUri?: string;\n  runOutputs?: UseGetRunQueryResponseOutputs;\n  runTags: Record<string, KeyValueEntity>;\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  // Use scrollable artifact area only for non-xs screens\n  const useFullHeightPage = useMediaQuery(`(min-width: ${theme.responsive.breakpoints.sm}px)`);\n\n  return (\n    <div\n      css={{\n        flex: 1,\n        overflow: 'hidden',\n        display: 'flex',\n        paddingBottom: theme.spacing.md,\n        position: 'relative',\n      }}\n    >\n      <ArtifactPage\n        runUuid={runUuid}\n        runTags={runTags}\n        runOutputs={runOutputs}\n        useAutoHeight={useFullHeightPage}\n        artifactRootUri={artifactUri}\n        experimentId={experimentId}\n      />\n    </div>\n  );\n};\n","import { shouldEnableRunDetailsPageTracesTab } from '../../../common/utils/FeatureUtils';\nimport { useParams } from '../../../common/utils/RoutingUtils';\nimport { RunPageTabName } from '../../constants';\n\n/**\n * Returns the run view's active tab.\n * - Supports multi-slash artifact paths (hence '*' catch-all param)\n * - Supports both new (/artifacts/...) and previous (/artifactPath/...) routes\n */\nexport const useRunViewActiveTab = (): RunPageTabName => {\n  const { '*': tabParam } = useParams<{ '*': string }>();\n  if (tabParam === 'model-metrics') {\n    return RunPageTabName.MODEL_METRIC_CHARTS;\n  }\n  if (tabParam === 'system-metrics') {\n    return RunPageTabName.SYSTEM_METRIC_CHARTS;\n  }\n  if (shouldEnableRunDetailsPageTracesTab() && tabParam === 'traces') {\n    return RunPageTabName.TRACES;\n  }\n  if (tabParam?.match(/^(artifactPath|artifacts)/)) {\n    return RunPageTabName.ARTIFACTS;\n  }\n\n  return RunPageTabName.OVERVIEW;\n};\n","import { InfoPopover, LegacyTabs, useDesignSystemTheme, Typography } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport { useNavigate, useParams } from '../../../common/utils/RoutingUtils';\nimport Routes from '../../routes';\nimport { RunPageTabName } from '../../constants';\nimport { useRunViewActiveTab } from './useRunViewActiveTab';\nimport { useState } from 'react';\nimport { shouldEnableRunDetailsPageTracesTab } from '../../../common/utils/FeatureUtils';\n\n// Set of tabs that when active, the margin of the tab selector should be removed for better displaying\nconst TABS_WITHOUT_MARGIN = [RunPageTabName.ARTIFACTS, RunPageTabName.EVALUATIONS];\n\n/**\n * Mode switcher for the run details page.\n */\nexport const RunViewModeSwitch = () => {\n  const { experimentId, runUuid } = useParams<{ runUuid: string; experimentId: string }>();\n  const navigate = useNavigate();\n  const { theme } = useDesignSystemTheme();\n  const currentTab = useRunViewActiveTab();\n  const [removeTabMargin, setRemoveTabMargin] = useState(TABS_WITHOUT_MARGIN.includes(currentTab));\n\n  const onTabChanged = (newTabKey: string) => {\n    if (!experimentId || !runUuid || currentTab === newTabKey) {\n      return;\n    }\n\n    setRemoveTabMargin(TABS_WITHOUT_MARGIN.includes(newTabKey as RunPageTabName));\n\n    if (newTabKey === RunPageTabName.OVERVIEW) {\n      navigate(Routes.getRunPageRoute(experimentId, runUuid));\n      return;\n    }\n    navigate(Routes.getRunPageTabRoute(experimentId, runUuid, newTabKey));\n  };\n\n  const getLegacyTracesTabLink = () => {\n    if (!shouldEnableRunDetailsPageTracesTab()) {\n      return null;\n    }\n    return (\n      <LegacyTabs.TabPane\n        tab={<FormattedMessage defaultMessage=\"Traces\" description=\"Run details page > tab selector > Traces tab\" />}\n        key={RunPageTabName.TRACES}\n      />\n    );\n  };\n\n  return (\n    // @ts-expect-error TS(2322)\n    <LegacyTabs activeKey={currentTab} onChange={onTabChanged} tabBarStyle={{ margin: removeTabMargin && '0px' }}>\n      <LegacyTabs.TabPane\n        tab={\n          <FormattedMessage defaultMessage=\"Overview\" description=\"Run details page > tab selector > overview tab\" />\n        }\n        key={RunPageTabName.OVERVIEW}\n      />\n\n      <LegacyTabs.TabPane\n        tab={\n          <FormattedMessage\n            defaultMessage=\"Model metrics\"\n            description=\"Run details page > tab selector > Model metrics tab\"\n          />\n        }\n        key={RunPageTabName.MODEL_METRIC_CHARTS}\n      />\n      <LegacyTabs.TabPane\n        tab={\n          <FormattedMessage\n            defaultMessage=\"System metrics\"\n            description=\"Run details page > tab selector > Model metrics tab\"\n          />\n        }\n        key={RunPageTabName.SYSTEM_METRIC_CHARTS}\n      />\n      {getLegacyTracesTabLink()}\n      <LegacyTabs.TabPane\n        tab={\n          <FormattedMessage defaultMessage=\"Artifacts\" description=\"Run details page > tab selector > artifacts tab\" />\n        }\n        key={RunPageTabName.ARTIFACTS}\n      />\n    </LegacyTabs>\n  );\n};\n","import {\n  Button,\n  ChevronDownIcon,\n  DropdownMenu,\n  NewWindowIcon,\n  Tag,\n  LegacyTooltip,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { first, last, orderBy } from 'lodash';\nimport { useMemo, useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { useSelector } from 'react-redux';\nimport { Link } from '../../../common/utils/RoutingUtils';\nimport Utils from '../../../common/utils/Utils';\nimport { RegisterModel } from '../../../model-registry/components/RegisterModel';\nimport { ModelVersionStatusIcons } from '../../../model-registry/constants';\nimport { ModelRegistryRoutes } from '../../../model-registry/routes';\nimport type { ReduxState } from '../../../redux-types';\nimport Routes from '../../routes';\nimport { KeyValueEntity, ModelVersionInfoEntity } from '../../types';\nimport { ReactComponent as RegisteredModelOkIcon } from '../../../common/static/registered-model-grey-ok.svg';\nimport { RunPageModelVersionSummary } from './hooks/useUnifiedRegisteredModelVersionsSummariesForRun';\n\ninterface LoggedModelWithRegistrationInfo {\n  path: string;\n  absolutePath: string;\n  registeredModelVersionSummaries: RunPageModelVersionSummary[];\n}\n\nfunction LoggedModelsDropdownContent({\n  models,\n  onRegisterClick,\n  experimentId,\n  runUuid,\n}: {\n  models: LoggedModelWithRegistrationInfo[];\n  onRegisterClick: (model: LoggedModelWithRegistrationInfo) => void;\n  experimentId: string;\n  runUuid: string;\n}) {\n  const { theme } = useDesignSystemTheme();\n  const renderSection = (title: string, sectionModels: LoggedModelWithRegistrationInfo[]) => {\n    return (\n      <DropdownMenu.Group>\n        <DropdownMenu.Label>{title}</DropdownMenu.Label>\n        {sectionModels.map((model) => {\n          const registeredModelSummary = first(model.registeredModelVersionSummaries);\n          if (!registeredModelSummary) {\n            return (\n              <DropdownMenu.Item\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_runviewheaderregistermodelbutton.tsx_50\"\n                onClick={() => onRegisterClick(model)}\n                key={model.absolutePath}\n              >\n                <div css={{ marginRight: theme.spacing.md }}>{last(model.path.split('/'))}</div>\n                <DropdownMenu.HintColumn>\n                  <Link\n                    target=\"_blank\"\n                    to={Routes.getRunPageTabRoute(experimentId, runUuid, 'artifacts/' + model.path)}\n                  >\n                    <Button\n                      componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_runviewheaderregistermodelbutton.tsx_58\"\n                      type=\"link\"\n                      size=\"small\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                      }}\n                      endIcon={<NewWindowIcon />}\n                    >\n                      <FormattedMessage\n                        defaultMessage=\"View model\"\n                        description=\"Run page > Header > Register model dropdown > View model button label\"\n                      />\n                    </Button>\n                  </Link>\n                </DropdownMenu.HintColumn>\n              </DropdownMenu.Item>\n            );\n          }\n          const { status, displayedName, version, link } = registeredModelSummary;\n\n          return (\n            <Link target=\"_blank\" to={link} key={model.absolutePath}>\n              <DropdownMenu.Item componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_runviewheaderregistermodelbutton.tsx_80\">\n                <DropdownMenu.IconWrapper css={{ display: 'flex', alignItems: 'center' }}>\n                  {status === 'READY' ? <RegisteredModelOkIcon /> : status ? ModelVersionStatusIcons[status] : null}\n                </DropdownMenu.IconWrapper>\n                <span css={{ marginRight: theme.spacing.md }}>\n                  {displayedName}\n                  <Tag\n                    componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_runviewheaderregistermodelbutton.tsx_90\"\n                    css={{ marginLeft: 8, marginRight: 4 }}\n                  >\n                    v{version}\n                  </Tag>\n                </span>\n                <DropdownMenu.HintColumn>\n                  <Button\n                    componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_runviewheaderregistermodelbutton.tsx_89\"\n                    type=\"link\"\n                    size=\"small\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                    }}\n                    endIcon={<NewWindowIcon />}\n                  >\n                    <FormattedMessage\n                      defaultMessage=\"Go to model\"\n                      description=\"Run page > Header > Register model dropdown > Go to model button label\"\n                    />\n                  </Button>\n                </DropdownMenu.HintColumn>\n              </DropdownMenu.Item>\n            </Link>\n          );\n        })}\n      </DropdownMenu.Group>\n    );\n  };\n  const registeredModels = models.filter((model) => model.registeredModelVersionSummaries.length > 0);\n  const unregisteredModels = models.filter((model) => !model.registeredModelVersionSummaries.length);\n  return (\n    <>\n      {unregisteredModels.length ? renderSection('Unregistered models', unregisteredModels) : null}\n      {unregisteredModels.length && registeredModels.length ? <DropdownMenu.Separator /> : null}\n      {registeredModels.length ? renderSection('Registered models', registeredModels) : null}\n    </>\n  );\n}\n\nconst getRegisteredModelVersionLink = (modelVersion: ModelVersionInfoEntity) => {\n  const { name, version } = modelVersion;\n  return ModelRegistryRoutes.getModelVersionPageRoute(name, version);\n};\n\nexport const RunViewHeaderRegisterModelButton = ({\n  runUuid,\n  experimentId,\n  runTags,\n  artifactRootUri,\n  registeredModelVersionSummaries,\n}: {\n  runUuid: string;\n  experimentId: string;\n  runTags: Record<string, KeyValueEntity>;\n  artifactRootUri?: string;\n  registeredModelVersionSummaries: RunPageModelVersionSummary[];\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  const loggedModelPaths = useMemo(\n    () => (runTags ? Utils.getLoggedModelsFromTags(runTags).map(({ artifactPath }) => artifactPath) : []),\n    [runTags],\n  );\n\n  const models = useMemo<LoggedModelWithRegistrationInfo[]>(\n    () =>\n      orderBy(\n        loggedModelPaths.map((path) => ({\n          path,\n          absolutePath: `${artifactRootUri}/${path}`,\n          registeredModelVersionSummaries:\n            registeredModelVersionSummaries?.filter(({ source }) => source === `${artifactRootUri}/${path}`) || [],\n        })),\n        (model) => parseInt(model.registeredModelVersionSummaries[0]?.version || '0', 10),\n        'desc',\n      ),\n    [loggedModelPaths, registeredModelVersionSummaries, artifactRootUri],\n  );\n\n  const [selectedModelToRegister, setSelectedModelToRegister] = useState<LoggedModelWithRegistrationInfo | null>(null);\n\n  if (models.length > 1) {\n    const modelsRegistered = models.filter((model) => model.registeredModelVersionSummaries.length > 0);\n\n    return (\n      <>\n        {selectedModelToRegister && (\n          <RegisterModel\n            runUuid={runUuid}\n            modelPath={selectedModelToRegister.absolutePath}\n            modelRelativePath={selectedModelToRegister.path}\n            disabled={false}\n            showButton={false}\n            modalVisible\n            onCloseModal={() => setSelectedModelToRegister(null)}\n          />\n        )}\n        <DropdownMenu.Root modal={false}>\n          <LegacyTooltip\n            placement=\"bottom\"\n            title={\n              <FormattedMessage\n                defaultMessage=\"{registeredCount}/{loggedCount} logged models are registered\"\n                description=\"Run page > Header > Register model dropdown > Button tooltip\"\n                values={{ registeredCount: modelsRegistered.length, loggedCount: models.length }}\n              />\n            }\n          >\n            <DropdownMenu.Trigger asChild>\n              <Button\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_runviewheaderregistermodelbutton.tsx_195\"\n                type=\"primary\"\n                endIcon={<ChevronDownIcon />}\n              >\n                <FormattedMessage\n                  defaultMessage=\"Register model\"\n                  description=\"Run page > Header > Register model dropdown > Button label when some models are not registered\"\n                />\n              </Button>\n            </DropdownMenu.Trigger>\n          </LegacyTooltip>\n          <DropdownMenu.Content align=\"end\">\n            <LoggedModelsDropdownContent\n              models={models}\n              onRegisterClick={setSelectedModelToRegister}\n              experimentId={experimentId}\n              runUuid={runUuid}\n            />\n          </DropdownMenu.Content>\n        </DropdownMenu.Root>\n      </>\n    );\n  }\n\n  const singleModel = first(models);\n\n  if (!singleModel) {\n    return null;\n  }\n\n  const registeredModelVersionSummary = first(singleModel.registeredModelVersionSummaries);\n\n  if (registeredModelVersionSummary) {\n    return (\n      <Link to={registeredModelVersionSummary.link} target=\"_blank\" css={{ marginLeft: theme.spacing.sm }}>\n        <Button\n          componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_runviewheaderregistermodelbutton.tsx_231\"\n          endIcon={<NewWindowIcon />}\n          type=\"link\"\n        >\n          Model registered\n        </Button>\n      </Link>\n    );\n  }\n  return (\n    <RegisterModel\n      disabled={false}\n      runUuid={runUuid}\n      modelPath={singleModel.absolutePath}\n      modelRelativePath={singleModel.path}\n      showButton\n      buttonType=\"primary\"\n    />\n  );\n};\n","import { FormattedMessage } from 'react-intl';\nimport { Link } from '../../../common/utils/RoutingUtils';\nimport { OverflowMenu, PageHeader } from '../../../shared/building_blocks/PageHeader';\nimport Routes from '../../routes';\nimport type { ExperimentEntity, KeyValueEntity } from '../../types';\nimport { RunViewModeSwitch } from './RunViewModeSwitch';\nimport Utils from '../../../common/utils/Utils';\nimport { RunViewHeaderRegisterModelButton } from './RunViewHeaderRegisterModelButton';\nimport type { UseGetRunQueryResponseExperiment } from './hooks/useGetRunQuery';\nimport type { RunPageModelVersionSummary } from './hooks/useUnifiedRegisteredModelVersionsSummariesForRun';\n\n/**\n * Run details page header component, common for all page view modes\n */\nexport const RunViewHeader = ({\n  hasComparedExperimentsBefore,\n  comparedExperimentIds = [],\n  experiment,\n  runDisplayName,\n  runTags,\n  runParams,\n  runUuid,\n  handleRenameRunClick,\n  handleDeleteRunClick,\n  artifactRootUri,\n  registeredModelVersionSummaries,\n  isLoading,\n}: {\n  hasComparedExperimentsBefore?: boolean;\n  comparedExperimentIds?: string[];\n  runDisplayName: string;\n  runUuid: string;\n  runTags: Record<string, KeyValueEntity>;\n  runParams: Record<string, KeyValueEntity>;\n  experiment: ExperimentEntity | UseGetRunQueryResponseExperiment;\n  handleRenameRunClick: () => void;\n  handleDeleteRunClick?: () => void;\n  artifactRootUri?: string;\n  registeredModelVersionSummaries: RunPageModelVersionSummary[];\n  isLoading?: boolean;\n}) => {\n  function getExperimentPageLink() {\n    return hasComparedExperimentsBefore && comparedExperimentIds ? (\n      <Link to={Routes.getCompareExperimentsPageRoute(comparedExperimentIds)}>\n        <FormattedMessage\n          defaultMessage=\"Displaying Runs from {numExperiments} Experiments\"\n          // eslint-disable-next-line max-len\n          description=\"Breadcrumb nav item to link to the compare-experiments page on compare runs page\"\n          values={{\n            numExperiments: comparedExperimentIds.length,\n          }}\n        />\n      </Link>\n    ) : (\n      <Link to={Routes.getExperimentPageRoute(experiment?.experimentId ?? '')} data-test-id=\"experiment-runs-link\">\n        {experiment.name}\n      </Link>\n    );\n  }\n\n  const breadcrumbs = [getExperimentPageLink()];\n\n  const renderRegisterModelButton = () => {\n    return (\n      <RunViewHeaderRegisterModelButton\n        runUuid={runUuid}\n        experimentId={experiment?.experimentId ?? ''}\n        runTags={runTags}\n        artifactRootUri={artifactRootUri}\n        registeredModelVersionSummaries={registeredModelVersionSummaries}\n      />\n    );\n  };\n\n  return (\n    <div css={{ flexShrink: 0 }}>\n      <PageHeader\n        title={<span data-test-id=\"runs-header\">{runDisplayName}</span>}\n        breadcrumbs={breadcrumbs}\n        /* prettier-ignore */\n      >\n        <OverflowMenu\n          menu={[\n            {\n              id: 'overflow-rename-button',\n              onClick: handleRenameRunClick,\n              itemName: (\n                <FormattedMessage defaultMessage=\"Rename\" description=\"Menu item to rename an experiment run\" />\n              ),\n            },\n            ...(handleDeleteRunClick\n              ? [\n                  {\n                    id: 'overflow-delete-button',\n                    onClick: handleDeleteRunClick,\n                    itemName: (\n                      <FormattedMessage defaultMessage=\"Delete\" description=\"Menu item to delete an experiment run\" />\n                    ),\n                  },\n                ]\n              : []),\n          ]}\n        />\n\n        {renderRegisterModelButton()}\n      </PageHeader>\n      <RunViewModeSwitch />\n    </div>\n  );\n};\n","import { Tag, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { RunInfoEntity } from '../../../types';\nimport { RunStatusIcon } from '../../RunStatusIcon';\nimport { FormattedMessage } from 'react-intl';\nimport type { MlflowRunStatus } from '../../../../graphql/__generated__/graphql';\n\n/**\n * Displays run status cell in run detail overview.\n */\nexport const RunViewStatusBox = ({ status }: { status: RunInfoEntity['status'] | MlflowRunStatus | null }) => {\n  const { theme } = useDesignSystemTheme();\n  const getTagColor = () => {\n    if (status === 'FINISHED') {\n      return theme.isDarkMode ? theme.colors.green800 : theme.colors.green100;\n    }\n    if (status === 'KILLED' || status === 'FAILED') {\n      return theme.isDarkMode ? theme.colors.red800 : theme.colors.red100;\n    }\n    if (status === 'SCHEDULED' || status === 'RUNNING') {\n      return theme.isDarkMode ? theme.colors.blue800 : theme.colors.blue100;\n    }\n\n    return undefined;\n  };\n\n  const getStatusLabel = () => {\n    if (status === 'FINISHED') {\n      return (\n        <Typography.Text color=\"success\">\n          <FormattedMessage\n            defaultMessage=\"Finished\"\n            description=\"Run page > Overview > Run status cell > Value for finished state\"\n          />\n        </Typography.Text>\n      );\n    }\n    if (status === 'KILLED') {\n      return (\n        <Typography.Text color=\"error\">\n          <FormattedMessage\n            defaultMessage=\"Killed\"\n            description=\"Run page > Overview > Run status cell > Value for killed state\"\n          />\n        </Typography.Text>\n      );\n    }\n    if (status === 'FAILED') {\n      return (\n        <Typography.Text color=\"error\">\n          <FormattedMessage\n            defaultMessage=\"Failed\"\n            description=\"Run page > Overview > Run status cell > Value for failed state\"\n          />\n        </Typography.Text>\n      );\n    }\n    if (status === 'RUNNING') {\n      return (\n        <Typography.Text color=\"info\">\n          <FormattedMessage\n            defaultMessage=\"Running\"\n            description=\"Run page > Overview > Run status cell > Value for running state\"\n          />\n        </Typography.Text>\n      );\n    }\n    if (status === 'SCHEDULED') {\n      return (\n        <Typography.Text color=\"info\">\n          <FormattedMessage\n            defaultMessage=\"Scheduled\"\n            description=\"Run page > Overview > Run status cell > Value for scheduled state\"\n          />\n        </Typography.Text>\n      );\n    }\n    return status;\n  };\n\n  return (\n    <Tag\n      componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_overview_runviewstatusbox.tsx_81\"\n      css={{ backgroundColor: getTagColor() }}\n    >\n      {status && <RunStatusIcon status={status} />}{' '}\n      <Typography.Text css={{ marginLeft: theme.spacing.sm }}>{getStatusLabel()}</Typography.Text>\n    </Tag>\n  );\n};\n","import { Link } from '../../../../common/utils/RoutingUtils';\nimport Utils from '../../../../common/utils/Utils';\nimport Routes from '../../../routes';\nimport type { KeyValueEntity, RunInfoEntity } from '../../../types';\nimport type { UseGetRunQueryResponseRunInfo } from '../hooks/useGetRunQuery';\n\nexport const RunViewUserLinkBox = ({\n  runInfo,\n  tags,\n}: {\n  runInfo: RunInfoEntity | UseGetRunQueryResponseRunInfo;\n  tags: Record<string, KeyValueEntity>;\n}) => {\n  const user = Utils.getUser(runInfo, tags);\n  return <Link to={Routes.searchRunsByUser(runInfo?.experimentId ?? '', user)}>{user}</Link>;\n};\n","import {\n  Empty,\n  Input,\n  SearchIcon,\n  Table,\n  TableCell,\n  TableHeader,\n  TableRow,\n  Typography,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { MetricEntitiesByName, MetricEntity, RunInfoEntity } from '../../../types';\nimport { sum, values } from 'lodash';\nimport { useMemo, useState } from 'react';\nimport { Link } from '../../../../common/utils/RoutingUtils';\nimport Routes from '../../../routes';\nimport { FormattedMessage, defineMessages, useIntl } from 'react-intl';\nimport { isSystemMetricKey } from '../../../utils/MetricsUtils';\nimport { Table as TableDef, flexRender, getCoreRowModel, useReactTable } from '@tanstack/react-table';\nimport type { UseGetRunQueryResponseRunInfo } from '../hooks/useGetRunQuery';\nimport { useExperimentTrackingDetailsPageLayoutStyles } from '../../../hooks/useExperimentTrackingDetailsPageLayoutStyles';\n\nconst { systemMetricsLabel, modelMetricsLabel } = defineMessages({\n  systemMetricsLabel: {\n    defaultMessage: 'System metrics',\n    description: 'Run page > Overview > Metrics table > System charts section > title',\n  },\n  modelMetricsLabel: {\n    defaultMessage: 'Model metrics',\n    description: 'Run page > Overview > Metrics table > Model charts section > title',\n  },\n});\n\nconst metricKeyMatchesFilter =\n  (filter: string) =>\n  ({ key }: MetricEntity) =>\n    key.toLowerCase().includes(filter.toLowerCase());\n\nconst RunViewMetricsTableSection = ({\n  metricsList,\n  runInfo,\n  header,\n  table,\n}: {\n  runInfo: RunInfoEntity | UseGetRunQueryResponseRunInfo;\n  metricsList: MetricEntity[];\n  header?: React.ReactNode;\n  table: TableDef<MetricEntity>;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const [{ column: keyColumn }] = table.getLeafHeaders();\n  return metricsList.length ? (\n    <>\n      {header && (\n        <TableRow>\n          <TableCell css={{ flex: 1, backgroundColor: theme.colors.backgroundSecondary }}>\n            <Typography.Text bold>\n              {header} ({metricsList.length})\n            </Typography.Text>\n          </TableCell>\n        </TableRow>\n      )}\n      {metricsList.map(\n        ({\n          // Get metric key and value to display in table\n          key,\n          value,\n        }) => (\n          <TableRow key={key}>\n            <TableCell\n              style={{\n                flexGrow: 0,\n                flexBasis: keyColumn.getSize(),\n              }}\n            >\n              <Link to={Routes.getMetricPageRoute([runInfo.runUuid ?? ''], key, [runInfo.experimentId ?? ''])}>\n                {key}\n              </Link>\n            </TableCell>\n            <TableCell\n              css={{\n                flexGrow: 1,\n              }}\n            >\n              {value.toString()}\n            </TableCell>\n          </TableRow>\n        ),\n      )}\n    </>\n  ) : null;\n};\n\n/**\n * Displays table with metrics key/values in run detail overview.\n */\nexport const RunViewMetricsTable = ({\n  latestMetrics,\n  runInfo,\n}: {\n  latestMetrics: MetricEntitiesByName;\n  runInfo: RunInfoEntity | UseGetRunQueryResponseRunInfo;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const { detailsPageTableStyles, detailsPageNoEntriesStyles, detailsPageNoResultsWrapperStyles } =\n    useExperimentTrackingDetailsPageLayoutStyles();\n  const intl = useIntl();\n  const [filter, setFilter] = useState('');\n\n  const metricValues = useMemo(() => values(latestMetrics), [latestMetrics]);\n\n  const columns = useMemo(\n    () => [\n      {\n        id: 'key',\n        accessorKey: 'key',\n        header: () => (\n          <FormattedMessage\n            defaultMessage=\"Metric\"\n            description=\"Run page > Overview > Metrics table > Key column header\"\n          />\n        ),\n        enableResizing: true,\n        size: 240,\n      },\n      {\n        id: 'value',\n        header: () => (\n          <FormattedMessage\n            defaultMessage=\"Value\"\n            description=\"Run page > Overview > Metrics table > Value column header\"\n          />\n        ),\n        accessorKey: 'value',\n        enableResizing: false,\n      },\n    ],\n    [],\n  );\n\n  // Break down metric lists into system and model segments. If no system (or model) metrics\n  // are detected, return a single segment.\n  const metricSegments = useMemo(() => {\n    const systemMetrics = metricValues.filter(({ key }) => isSystemMetricKey(key));\n    const modelMetrics = metricValues.filter(({ key }) => !isSystemMetricKey(key));\n    const isSegmented = systemMetrics.length > 0 && modelMetrics.length > 0;\n    if (!isSegmented) {\n      return [{ header: undefined, metrics: metricValues.filter(metricKeyMatchesFilter(filter)) }];\n    }\n    return [\n      {\n        header: intl.formatMessage(systemMetricsLabel),\n        metrics: systemMetrics.filter(metricKeyMatchesFilter(filter)),\n      },\n      {\n        header: intl.formatMessage(modelMetricsLabel),\n        metrics: modelMetrics.filter(metricKeyMatchesFilter(filter)),\n      },\n    ];\n  }, [filter, metricValues, intl]);\n\n  const table = useReactTable<MetricEntity>({\n    data: metricValues,\n    getCoreRowModel: getCoreRowModel(),\n    getRowId: (row) => row.key,\n    enableColumnResizing: true,\n    columnResizeMode: 'onChange',\n    columns,\n  });\n\n  const renderTableContent = () => {\n    if (!metricValues.length) {\n      return (\n        <div css={detailsPageNoEntriesStyles}>\n          <Empty\n            description={\n              <FormattedMessage\n                defaultMessage=\"No metrics recorded\"\n                description=\"Run page > Overview > Metrics table > No metrics recorded\"\n              />\n            }\n          />\n        </div>\n      );\n    }\n\n    const areAllResultsFiltered = sum(metricSegments.map(({ metrics }) => metrics.length)) < 1;\n\n    return (\n      <>\n        <div css={{ marginBottom: theme.spacing.sm }}>\n          <Input\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_overview_runviewmetricstable.tsx_186\"\n            prefix={<SearchIcon />}\n            placeholder={intl.formatMessage({\n              defaultMessage: 'Search metrics',\n              description: 'Run page > Overview > Metrics table > Filter input placeholder',\n            })}\n            value={filter}\n            onChange={(e) => setFilter(e.target.value)}\n            allowClear\n          />\n        </div>\n\n        <Table\n          scrollable\n          empty={\n            areAllResultsFiltered ? (\n              <div css={detailsPageNoResultsWrapperStyles}>\n                <Empty\n                  description={\n                    <FormattedMessage\n                      defaultMessage=\"No metrics match the search filter\"\n                      description=\"Message displayed when no metrics match the search filter in the run details page details metrics table\"\n                    />\n                  }\n                />\n              </div>\n            ) : null\n          }\n          css={detailsPageTableStyles}\n        >\n          <TableRow isHeader>\n            {table.getLeafHeaders().map((header) => (\n              <TableHeader\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_overview_runviewmetricstable.tsx_312\"\n                key={header.id}\n                header={header}\n                column={header.column}\n                setColumnSizing={table.setColumnSizing}\n                isResizing={header.column.getIsResizing()}\n                style={{\n                  flexGrow: header.column.getCanResize() ? 0 : 1,\n                  flexBasis: header.column.getCanResize() ? header.column.getSize() : undefined,\n                }}\n              >\n                {flexRender(header.column.columnDef.header, header.getContext())}\n              </TableHeader>\n            ))}\n          </TableRow>\n          {metricSegments.map((segment, index) => (\n            <RunViewMetricsTableSection\n              key={segment.header || index}\n              metricsList={segment.metrics}\n              runInfo={runInfo}\n              header={segment.header}\n              table={table}\n            />\n          ))}\n        </Table>\n      </>\n    );\n  };\n  return (\n    <div css={{ flex: 1, display: 'flex', flexDirection: 'column', overflow: 'hidden' }}>\n      <Typography.Title level={4} css={{ flexShrink: 0 }}>\n        <FormattedMessage\n          defaultMessage=\"Metrics ({length})\"\n          description=\"Run page > Overview > Metrics table > Section title\"\n          values={{ length: metricValues.filter(metricKeyMatchesFilter(filter)).length }}\n        />\n      </Typography.Title>\n      <div\n        css={{\n          padding: theme.spacing.sm,\n          border: `1px solid ${theme.colors.borderDecorative}`,\n          borderRadius: theme.general.borderRadiusBase,\n          display: 'flex',\n          flexDirection: 'column',\n          flex: 1,\n          overflow: 'hidden',\n        }}\n      >\n        {renderTableContent()}\n      </div>\n    </div>\n  );\n};\n","import type { KeyValueEntity, RunDatasetWithTags, RunInfoEntity } from '../../../types';\nimport { Button, DropdownMenu, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { ExperimentViewDatasetWithContext } from '../../experiment-page/components/runs/ExperimentViewDatasetWithContext';\nimport { useState } from 'react';\nimport {\n  DatasetWithRunType,\n  ExperimentViewDatasetDrawer,\n} from '../../experiment-page/components/runs/ExperimentViewDatasetDrawer';\nimport type { UseGetRunQueryResponseRunInfo } from '../hooks/useGetRunQuery';\n\n/**\n * Renders single dataset, either in overview table cell or within a dropdown\n */\nconst DatasetEntry = ({ dataset, onClick }: { dataset: RunDatasetWithTags; onClick: () => void }) => {\n  return (\n    <Typography.Link\n      componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_overview_runviewdatasetbox.tsx_16\"\n      role=\"link\"\n      css={{\n        textAlign: 'left',\n      }}\n      onClick={onClick}\n    >\n      <ExperimentViewDatasetWithContext datasetWithTags={dataset} displayTextAsLink css={{ margin: 0 }} />\n    </Typography.Link>\n  );\n};\n\n/**\n * Displays run datasets section in run detail overview.\n */\nexport const RunViewDatasetBox = ({\n  tags,\n  runInfo,\n  datasets,\n}: {\n  tags: Record<string, KeyValueEntity>;\n  runInfo: RunInfoEntity | UseGetRunQueryResponseRunInfo;\n  datasets: RunDatasetWithTags[];\n}) => {\n  const [selectedDatasetWithRun, setSelectedDatasetWithRun] = useState<DatasetWithRunType | null>(null);\n  const { theme } = useDesignSystemTheme();\n  const [isDrawerOpen, setIsDrawerOpen] = useState(false);\n\n  if (!datasets || !datasets.length) {\n    return null;\n  }\n\n  const firstDataset = datasets[0];\n  const remainingDatasets = datasets.slice(1);\n\n  const datasetClicked = (dataset: RunDatasetWithTags) => {\n    setSelectedDatasetWithRun({\n      datasetWithTags: dataset,\n      runData: {\n        experimentId: runInfo.experimentId ?? undefined,\n        runUuid: runInfo.runUuid ?? '',\n        runName: runInfo.runName ?? undefined,\n        datasets: datasets,\n        tags: tags,\n      },\n    });\n    setIsDrawerOpen(true);\n  };\n\n  return (\n    <div css={{ display: 'flex', gap: theme.spacing.sm, alignItems: 'center' }}>\n      <DatasetEntry dataset={firstDataset} onClick={() => datasetClicked(firstDataset)} />\n      {remainingDatasets.length ? (\n        <DropdownMenu.Root modal={false}>\n          <DropdownMenu.Trigger asChild>\n            <Button\n              componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_overview_runviewdatasetbox.tsx_70\"\n              size=\"small\"\n            >\n              +{remainingDatasets.length}\n            </Button>\n          </DropdownMenu.Trigger>\n          <DropdownMenu.Content>\n            {remainingDatasets.map((datasetWithTags) => {\n              return (\n                <DropdownMenu.Item\n                  componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_overview_runviewdatasetbox.tsx_81\"\n                  key={datasetWithTags.dataset.digest}\n                >\n                  <DatasetEntry dataset={datasetWithTags} onClick={() => datasetClicked(datasetWithTags)} />\n                </DropdownMenu.Item>\n              );\n            })}\n          </DropdownMenu.Content>\n        </DropdownMenu.Root>\n      ) : null}\n      {selectedDatasetWithRun && (\n        <ExperimentViewDatasetDrawer\n          isOpen={isDrawerOpen}\n          setIsOpen={setIsDrawerOpen}\n          selectedDatasetWithRun={selectedDatasetWithRun}\n          setSelectedDatasetWithRun={setSelectedDatasetWithRun}\n        />\n      )}\n    </div>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { ReduxState, ThunkDispatch } from '../../../../redux-types';\nimport { useEffect, useMemo } from 'react';\nimport { getRunApi } from '../../../actions';\nimport { ParagraphSkeleton } from '@databricks/design-system';\nimport { Link } from '../../../../common/utils/RoutingUtils';\nimport Routes from '../../../routes';\nimport { FormattedMessage } from 'react-intl';\nimport { shouldEnableGraphQLRunDetailsPage } from '../../../../common/utils/FeatureUtils';\nimport { useGetRunQuery } from '../hooks/useGetRunQuery';\n\nexport const RunViewParentRunBox = ({ parentRunUuid }: { parentRunUuid: string }) => {\n  const dispatch = useDispatch<ThunkDispatch>();\n\n  const parentRunInfoRedux = useSelector(({ entities }: ReduxState) => {\n    return entities.runInfosByUuid[parentRunUuid];\n  });\n\n  const parentRunInfoGraphql = useGetRunQuery({\n    runUuid: parentRunUuid,\n    disabled: !shouldEnableGraphQLRunDetailsPage(),\n  });\n\n  const parentRunInfo = useMemo(() => {\n    return shouldEnableGraphQLRunDetailsPage() ? parentRunInfoGraphql?.data?.info : parentRunInfoRedux;\n  }, [parentRunInfoGraphql, parentRunInfoRedux]);\n\n  useEffect(() => {\n    // Don't call REST API if GraphQL is enabled\n    if (shouldEnableGraphQLRunDetailsPage()) {\n      return;\n    }\n    if (!parentRunInfo) {\n      dispatch(getRunApi(parentRunUuid));\n    }\n  }, [dispatch, parentRunUuid, parentRunInfo]);\n\n  if (!parentRunInfo) {\n    return (\n      <ParagraphSkeleton\n        loading\n        label={\n          <FormattedMessage\n            defaultMessage=\"Parent run name loading\"\n            description=\"Run page > Overview > Parent run name loading\"\n          />\n        }\n      />\n    );\n  }\n\n  if (!parentRunInfo.experimentId || !parentRunInfo.runUuid) {\n    return null;\n  }\n\n  return (\n    <Link to={Routes.getRunPageRoute(parentRunInfo.experimentId, parentRunInfo.runUuid)}>{parentRunInfo.runName}</Link>\n  );\n};\n","import { Button, PencilIcon, Spinner, Tooltip, useDesignSystemTheme } from '@databricks/design-system';\nimport { useEditKeyValueTagsModal } from '../../../../common/hooks/useEditKeyValueTagsModal';\nimport { KeyValueEntity } from '../../../types';\nimport { KeyValueTag } from '../../../../common/components/KeyValueTag';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { keys, values } from 'lodash';\nimport { useDispatch } from 'react-redux';\nimport { ThunkDispatch } from '../../../../redux-types';\nimport { setRunTagsBulkApi } from '../../../actions';\nimport { MLFLOW_INTERNAL_PREFIX } from '../../../../common/utils/TagUtils';\nimport { useMemo } from 'react';\nimport { isUserFacingTag } from '../../../../common/utils/TagUtils';\n\n/**\n * Displays run tags cell in run detail overview.\n */\nexport const RunViewTagsBox = ({\n  runUuid,\n  tags,\n  onTagsUpdated,\n}: {\n  runUuid: string;\n  tags: Record<string, KeyValueEntity>;\n  onTagsUpdated: () => void;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const dispatch = useDispatch<ThunkDispatch>();\n  const intl = useIntl();\n\n  // Get keys and tag entities while excluding system tags\n  const [visibleTagKeys, visibleTagEntities] = useMemo(\n    () => [keys(tags).filter(isUserFacingTag), values(tags).filter(({ key }) => isUserFacingTag(key))],\n    [tags],\n  );\n\n  const { EditTagsModal, showEditTagsModal, isLoading } = useEditKeyValueTagsModal({\n    valueRequired: true,\n    allAvailableTags: visibleTagKeys,\n    saveTagsHandler: async (_, existingTags, newTags) =>\n      dispatch(setRunTagsBulkApi(runUuid, existingTags, newTags)).then(onTagsUpdated),\n  });\n\n  const showEditModal = () => {\n    showEditTagsModal({ tags: visibleTagEntities });\n  };\n\n  const editTagsLabel = intl.formatMessage({\n    defaultMessage: 'Edit tags',\n    description: \"Run page > Overview > Tags cell > 'Edit' button label\",\n  });\n\n  return (\n    <div\n      css={{\n        paddingTop: theme.spacing.xs,\n        paddingBottom: theme.spacing.xs,\n        display: 'flex',\n        flexWrap: 'wrap',\n        alignItems: 'center',\n        '> *': {\n          marginRight: '0 !important',\n        },\n        gap: theme.spacing.xs,\n      }}\n    >\n      {visibleTagEntities.length < 1 ? (\n        <Button\n          componentId=\"mlflow.run_details.overview.tags.add_button\"\n          size=\"small\"\n          type=\"tertiary\"\n          onClick={showEditModal}\n        >\n          <FormattedMessage\n            defaultMessage=\"Add tags\"\n            description=\"Run page > Overview > Tags cell > 'Add' button label\"\n          />\n        </Button>\n      ) : (\n        <>\n          {visibleTagEntities.map((tag) => (\n            <KeyValueTag tag={tag} key={`${tag.key}-${tag.value}`} enableFullViewModal css={{ marginRight: 0 }} />\n          ))}\n          <Tooltip componentId=\"mlflow.run_details.overview.tags.edit_button.tooltip\" content={editTagsLabel}>\n            <Button\n              componentId=\"mlflow.run_details.overview.tags.edit_button\"\n              aria-label={editTagsLabel}\n              size=\"small\"\n              icon={<PencilIcon />}\n              onClick={showEditModal}\n            />\n          </Tooltip>\n        </>\n      )}\n      {isLoading && <Spinner size=\"small\" />}\n      {EditTagsModal}\n    </div>\n  );\n};\n","import { useState } from 'react';\nimport { EditableNote } from '../../../../common/components/EditableNote';\nimport { KeyValueEntity } from '../../../types';\nimport { NOTE_CONTENT_TAG } from '../../../utils/NoteUtils';\nimport { Button, PencilIcon, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { useDispatch } from 'react-redux';\nimport { ThunkDispatch } from '../../../../redux-types';\nimport { setTagApi } from '../../../actions';\nimport { FormattedMessage, useIntl } from 'react-intl';\n\n/**\n * Displays editable description section in run detail overview.\n */\nexport const RunViewDescriptionBox = ({\n  runUuid,\n  tags,\n  onDescriptionChanged,\n}: {\n  runUuid: string;\n  tags: Record<string, KeyValueEntity>;\n  onDescriptionChanged: () => void | Promise<void>;\n}) => {\n  const noteContent = tags[NOTE_CONTENT_TAG]?.value || '';\n\n  const [showNoteEditor, setShowNoteEditor] = useState(false);\n  const intl = useIntl();\n  const { theme } = useDesignSystemTheme();\n\n  const dispatch = useDispatch<ThunkDispatch>();\n\n  const handleSubmitEditNote = (markdown: string) =>\n    dispatch(setTagApi(runUuid, NOTE_CONTENT_TAG, markdown))\n      .then(onDescriptionChanged)\n      .then(() => setShowNoteEditor(false));\n  const handleCancelEditNote = () => setShowNoteEditor(false);\n\n  const isEmpty = !noteContent;\n\n  return (\n    <div css={{ marginBottom: theme.spacing.md }}>\n      <Typography.Title level={4} css={{ display: 'flex', alignItems: 'center', gap: theme.spacing.xs }}>\n        <FormattedMessage\n          defaultMessage=\"Description\"\n          description=\"Run page > Overview > Description section > Section title\"\n        />\n        <Button\n          componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_overview_runviewdescriptionbox.tsx_46\"\n          size=\"small\"\n          type=\"tertiary\"\n          aria-label={intl.formatMessage({\n            defaultMessage: 'Edit description',\n            description: 'Run page > Overview > Description section > Edit button label',\n          })}\n          onClick={() => setShowNoteEditor(true)}\n          icon={<PencilIcon />}\n        />\n      </Typography.Title>\n      {isEmpty && !showNoteEditor && (\n        <Typography.Hint>\n          <FormattedMessage\n            defaultMessage=\"No description\"\n            description=\"Run page > Overview > Description section > Empty value placeholder\"\n          />\n        </Typography.Hint>\n      )}\n      {(!isEmpty || showNoteEditor) && (\n        <EditableNote\n          defaultMarkdown={noteContent}\n          onSubmit={handleSubmitEditNote}\n          onCancel={handleCancelEditNote}\n          showEditor={showNoteEditor}\n        />\n      )}\n    </div>\n  );\n};\n","import { Overflow, Tag, useDesignSystemTheme } from '@databricks/design-system';\nimport { Link } from '../../../../common/utils/RoutingUtils';\nimport { ReactComponent as RegisteredModelOkIcon } from '../../../../common/static/registered-model-grey-ok.svg';\nimport type { RunPageModelVersionSummary } from '../hooks/useUnifiedRegisteredModelVersionsSummariesForRun';\n\n/**\n * Displays list of registered models in run detail overview.\n * TODO: expand with logged models after finalizing design\n */\nexport const RunViewRegisteredModelsBox = ({\n  registeredModelVersionSummaries,\n}: {\n  registeredModelVersionSummaries: RunPageModelVersionSummary[];\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <Overflow>\n      {registeredModelVersionSummaries?.map((modelSummary) => (\n        <Link\n          key={modelSummary.displayedName}\n          to={modelSummary.link}\n          css={{ display: 'flex', alignItems: 'center', gap: theme.spacing.sm }}\n        >\n          <RegisteredModelOkIcon /> {modelSummary.displayedName}{' '}\n          <Tag\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_overview_runviewregisteredmodelsbox.tsx_40\"\n            css={{ cursor: 'pointer' }}\n          >\n            v{modelSummary.version}\n          </Tag>\n        </Link>\n      ))}\n    </Overflow>\n  );\n};\n","import { QueryFunctionContext, useQuery, UseQueryOptions } from '@mlflow/mlflow/src/common/utils/reactQueryHooks';\nimport type { PromptVersionsForRunResponse, RegisteredPromptDetailsResponse, RegisteredPromptVersion } from '../types';\nimport { RegisteredPromptsApi } from '../api';\n\nconst queryFn = async ({ queryKey }: QueryFunctionContext<PromptVersionsForRunQueryKey>) => {\n  const [, { runUuid }] = queryKey;\n  return RegisteredPromptsApi.getPromptVersionsForRun(runUuid);\n};\n\ntype PromptVersionsForRunQueryKey = ['run_uuid', { runUuid: string }];\n\nexport const usePromptVersionsForRunQuery = (\n  { runUuid }: { runUuid: string },\n  options: UseQueryOptions<\n    PromptVersionsForRunResponse,\n    Error,\n    PromptVersionsForRunResponse,\n    PromptVersionsForRunQueryKey\n  > = {},\n) => {\n  const queryResult = useQuery<\n    PromptVersionsForRunResponse,\n    Error,\n    PromptVersionsForRunResponse,\n    PromptVersionsForRunQueryKey\n  >(['run_uuid', { runUuid }], {\n    queryFn,\n    retry: false,\n    ...options,\n  });\n\n  return {\n    data: queryResult.data,\n    error: queryResult.error ?? undefined,\n    isLoading: queryResult.isLoading,\n    refetch: queryResult.refetch,\n  };\n};\n","import { ParagraphSkeleton, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { Link } from '../../../../common/utils/RoutingUtils';\nimport { usePromptVersionsForRunQuery } from '../../../pages/prompts/hooks/usePromptVersionsForRunQuery';\nimport Routes from '../../../routes';\n\nexport const RunViewRegisteredPromptsBox = ({ runUuid }: { runUuid: string }) => {\n  const { theme } = useDesignSystemTheme();\n  const { data, error, isLoading } = usePromptVersionsForRunQuery({ runUuid });\n  const promptVersions = data?.model_versions;\n\n  if (isLoading) {\n    return <ParagraphSkeleton />;\n  }\n\n  if (error || !promptVersions || promptVersions.length === 0) {\n    return <Typography.Hint>—</Typography.Hint>;\n  }\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'row',\n        gap: theme.spacing.sm,\n        flexWrap: 'wrap',\n        padding: `${theme.spacing.sm}px 0px`,\n      }}\n    >\n      {promptVersions.map((promptVersion, index) => {\n        const to = Routes.getPromptDetailsPageRoute(encodeURIComponent(promptVersion.name));\n        const displayText = `${promptVersion.name} (v${promptVersion.version})`;\n        return (\n          <Typography.Text key={displayText} css={{ whiteSpace: 'nowrap' }}>\n            <Link to={to}>{displayText}</Link>\n            {index < promptVersions.length - 1 && ','}\n          </Typography.Text>\n        );\n      })}\n    </div>\n  );\n};\n","import { ModelsIcon, Overflow, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { Link } from '../../../../common/utils/RoutingUtils';\nimport { RunInfoEntity } from '../../../types';\nimport { type LoggedModelProto } from '../../../types';\nimport Routes from '../../../routes';\nimport { first } from 'lodash';\nimport { FormattedMessage } from 'react-intl';\nimport { useMemo } from 'react';\nimport type { UseGetRunQueryResponseRunInfo } from '../hooks/useGetRunQuery';\n\n/**\n * Displays list of registered models in run detail overview.\n */\nexport const RunViewLoggedModelsBox = ({\n  loggedModels,\n  loggedModelsV3,\n  runInfo,\n}: {\n  runInfo: RunInfoEntity | UseGetRunQueryResponseRunInfo;\n  loggedModelsV3: LoggedModelProto[];\n  loggedModels: {\n    artifactPath: string;\n    flavors: string[];\n    utcTimeCreated: number;\n  }[];\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const { experimentId, runUuid } = runInfo;\n\n  const getModelFlavorName = (flavors: string[]) => {\n    return (\n      first(flavors) || (\n        <FormattedMessage\n          defaultMessage=\"Model\"\n          description=\"Run page > Overview > Logged models > Unknown model flavor\"\n        />\n      )\n    );\n  };\n\n  // Check if list has models with same flavor names.\n  // If true, display artifact path in dropdown menu to reduce ambiguity.\n  const shouldDisplayArtifactPaths = useMemo(() => {\n    const flavors = loggedModels.map((model) => getModelFlavorName(model.flavors));\n    const uniqueFlavors = new Set(flavors);\n    return uniqueFlavors.size !== flavors.length;\n  }, [loggedModels]);\n\n  return (\n    <Overflow>\n      {loggedModels.map((model, index) => {\n        return (\n          <Link\n            to={Routes.getRunPageRoute(experimentId ?? '', runUuid ?? '', model.artifactPath)}\n            key={model.artifactPath}\n            css={{\n              display: 'flex',\n              alignItems: 'center',\n              gap: theme.spacing.sm,\n              cursor: 'pointer',\n              height: shouldDisplayArtifactPaths && index > 0 ? theme.general.heightBase : theme.general.heightSm,\n            }}\n          >\n            <ModelsIcon />\n            <div>\n              {getModelFlavorName(model.flavors)}\n              {shouldDisplayArtifactPaths && index > 0 && <Typography.Hint>{model.artifactPath}</Typography.Hint>}\n            </div>\n          </Link>\n        );\n      })}\n      {loggedModelsV3.map((model, index) => {\n        return (\n          <Link\n            to={Routes.getExperimentLoggedModelDetailsPageRoute(experimentId ?? '', model.info?.model_id ?? '')}\n            key={model.info?.model_id ?? index}\n            css={{\n              display: 'flex',\n              alignItems: 'center',\n              gap: theme.spacing.sm,\n              cursor: 'pointer',\n              height: shouldDisplayArtifactPaths && index > 0 ? theme.general.heightBase : theme.general.heightSm,\n            }}\n          >\n            <ModelsIcon />\n            <div>{model.info?.name}</div>\n          </Link>\n        );\n      })}\n    </Overflow>\n  );\n};\n","import {\n  BranchIcon,\n  CopyIcon,\n  GitCommitIcon,\n  Tag,\n  LegacyTooltip,\n  Typography,\n  useDesignSystemTheme,\n  Popover,\n} from '@databricks/design-system';\nimport Utils from '../../../../common/utils/Utils';\nimport type { KeyValueEntity } from '../../../types';\nimport { MLFLOW_RUN_GIT_SOURCE_BRANCH_TAG } from '../../../constants';\nimport { CopyButton } from '@mlflow/mlflow/src/shared/building_blocks/CopyButton';\nimport { ExperimentSourceTypeIcon } from '../../ExperimentSourceTypeIcon';\n\nexport const RunViewSourceBox = ({\n  runUuid,\n  tags,\n  search,\n  className,\n}: {\n  runUuid: string;\n  tags: Record<string, KeyValueEntity>;\n  search: string;\n  className?: string;\n}) => {\n  const branchName = tags?.[MLFLOW_RUN_GIT_SOURCE_BRANCH_TAG]?.value;\n  const commitHash = tags?.[Utils.gitCommitTag]?.value;\n  const runSource = Utils.renderSource(tags, search, runUuid, branchName);\n\n  const { theme } = useDesignSystemTheme();\n  return runSource ? (\n    <div\n      css={{\n        display: 'flex',\n        alignItems: 'center',\n        gap: theme.spacing.sm,\n        paddingTop: theme.spacing.sm,\n        paddingBottom: theme.spacing.sm,\n        flexWrap: 'wrap',\n      }}\n      className={className}\n    >\n      <ExperimentSourceTypeIcon\n        sourceType={tags[Utils.sourceTypeTag]?.value}\n        css={{ color: theme.colors.actionPrimaryBackgroundDefault }}\n      />\n      {runSource}{' '}\n      {branchName && (\n        <LegacyTooltip title={branchName}>\n          <Tag\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_overview_runviewsourcebox.tsx_48\"\n            css={{ marginRight: 0 }}\n          >\n            <div css={{ display: 'flex', gap: 4, whiteSpace: 'nowrap' }}>\n              <BranchIcon /> {branchName}\n            </div>\n          </Tag>\n        </LegacyTooltip>\n      )}\n      {commitHash && (\n        <Popover.Root componentId=\"mlflow.run_details.overview.source.commit_hash_popover\">\n          <Popover.Trigger asChild>\n            <Tag\n              componentId=\"mlflow.run_details.overview.source.commit_hash\"\n              css={{ marginRight: 0, '&>div': { paddingRight: 0 } }}\n            >\n              <div css={{ display: 'flex', gap: theme.spacing.xs, whiteSpace: 'nowrap', alignContent: 'center' }}>\n                <GitCommitIcon />\n                {commitHash.slice(0, 7)}\n              </div>\n            </Tag>\n          </Popover.Trigger>\n          <Popover.Content align=\"start\">\n            <Popover.Arrow />\n            <div css={{ display: 'flex', gap: theme.spacing.xs, alignItems: 'center' }}>\n              {commitHash}\n              <CopyButton showLabel={false} size=\"small\" type=\"tertiary\" copyText={commitHash} icon={<CopyIcon />} />\n            </div>\n          </Popover.Content>\n        </Popover.Root>\n      )}\n    </div>\n  ) : (\n    <Typography.Hint>—</Typography.Hint>\n  );\n};\n","import {\n  Alert,\n  Button,\n  ColumnsIcon,\n  getShadowScrollStyles,\n  Spacer,\n  Typography,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { Theme } from '@emotion/react';\nimport { useMemo, useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { useCombinedRunInputsOutputsModels } from '../../../hooks/logged-models/useCombinedRunInputsOutputsModels';\nimport { RunInfoEntity } from '../../../types';\nimport { ExperimentLoggedModelListPageTable } from '../../experiment-logged-models/ExperimentLoggedModelListPageTable';\nimport {\n  ExperimentLoggedModelListPageKnownColumns,\n  useExperimentLoggedModelListPageTableColumns,\n} from '../../experiment-logged-models/hooks/useExperimentLoggedModelListPageTableColumns';\nimport { ExperimentLoggedModelOpenDatasetDetailsContextProvider } from '../../experiment-logged-models/hooks/useExperimentLoggedModelOpenDatasetDetails';\nimport {\n  UseGetRunQueryResponseInputs,\n  UseGetRunQueryResponseOutputs,\n  UseGetRunQueryResponseRunInfo,\n} from '../hooks/useGetRunQuery';\nimport { ExperimentLoggedModelListPageColumnSelector } from '../../experiment-logged-models/ExperimentLoggedModelListPageColumnSelector';\nimport { first, get } from 'lodash';\n\nconst supportedAttributeColumnKeys = [\n  ExperimentLoggedModelListPageKnownColumns.RelationshipType,\n  ExperimentLoggedModelListPageKnownColumns.Step,\n  ExperimentLoggedModelListPageKnownColumns.Name,\n  ExperimentLoggedModelListPageKnownColumns.Status,\n  ExperimentLoggedModelListPageKnownColumns.CreationTime,\n  ExperimentLoggedModelListPageKnownColumns.RegisteredModels,\n  ExperimentLoggedModelListPageKnownColumns.Dataset,\n];\n\nexport const RunViewLoggedModelsTable = ({\n  inputs,\n  outputs,\n  runInfo,\n}: {\n  inputs?: UseGetRunQueryResponseInputs;\n  outputs?: UseGetRunQueryResponseOutputs;\n  runInfo?: RunInfoEntity | UseGetRunQueryResponseRunInfo;\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  const { models: loggedModels, isLoading, errors } = useCombinedRunInputsOutputsModels(inputs, outputs, runInfo);\n\n  const [columnVisibility, setColumnVisibility] = useState<Record<string, boolean>>({});\n\n  const { columnDefs } = useExperimentLoggedModelListPageTableColumns({\n    loggedModels: loggedModels,\n    columnVisibility,\n    disablePinnedColumns: true,\n    disableOrderBy: true,\n    supportedAttributeColumnKeys,\n  });\n\n  const modelLoadError = useMemo(() => first(errors), [errors]);\n\n  return (\n    <div css={{ flex: 1, display: 'flex', flexDirection: 'column', overflow: 'hidden' }}>\n      <div css={{ display: 'flex', flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center' }}>\n        <Typography.Title level={4} css={{ flexShrink: 0 }}>\n          <FormattedMessage\n            defaultMessage=\"Logged models ({length})\"\n            description=\"A header for a table of logged models displayed on the run page. The 'length' variable is being replaced with the number of displayed logged models.\"\n            values={{ length: loggedModels.length }}\n          />\n        </Typography.Title>\n        <ExperimentLoggedModelListPageColumnSelector\n          columnDefs={columnDefs}\n          onUpdateColumns={setColumnVisibility}\n          columnVisibility={columnVisibility}\n          customTrigger={<Button componentId=\"mlflow.logged_model.list.columns\" icon={<ColumnsIcon />} />}\n        />\n      </div>\n      <Spacer size=\"sm\" shrinks={false} />\n      <div\n        css={{\n          padding: theme.spacing.sm,\n          border: `1px solid ${theme.colors.border}`,\n          borderRadius: theme.general.borderRadiusBase,\n          display: 'flex',\n          flexDirection: 'column',\n          flex: 1,\n          overflow: 'hidden',\n        }}\n      >\n        {modelLoadError instanceof Error && modelLoadError.message && (\n          <>\n            <Alert\n              type=\"error\"\n              message={modelLoadError.message}\n              closable={false}\n              componentId=\"mlflow.run_page.logged_model.list.error\"\n            />\n            <Spacer size=\"sm\" shrinks={false} />\n          </>\n        )}\n        <ExperimentLoggedModelOpenDatasetDetailsContextProvider>\n          <ExperimentLoggedModelListPageTable\n            columnDefs={columnDefs}\n            loggedModels={loggedModels}\n            columnVisibility={columnVisibility}\n            isLoading={isLoading}\n            isLoadingMore={false}\n            moreResultsAvailable={false}\n            disableLoadMore\n            css={getTableTheme(theme)}\n            displayShowExampleButton={false}\n          />\n        </ExperimentLoggedModelOpenDatasetDetailsContextProvider>\n      </div>\n    </div>\n  );\n};\n\nconst getTableTheme = (theme: Theme) => ({\n  '&.ag-theme-balham': {\n    '--ag-border-color': theme.colors.border,\n    '--ag-row-border-color': theme.colors.border,\n    '--ag-foreground-color': theme.colors.textPrimary,\n    '--ag-background-color': 'transparent',\n    '--ag-odd-row-background-color': 'transparent',\n    '--ag-row-hover-color': theme.colors.actionDefaultBackgroundHover,\n    '--ag-selected-row-background-color': theme.colors.actionDefaultBackgroundPress,\n    '--ag-header-foreground-color': theme.colors.textPrimary,\n    '--ag-header-background-color': theme.colors.backgroundPrimary,\n    '--ag-modal-overlay-background-color': theme.colors.overlayOverlay,\n    '.ag-header-row.ag-header-row-column-group': {\n      '--ag-header-foreground-color': theme.colors.textPrimary,\n    },\n    borderTop: 0,\n    fontSize: theme.typography.fontSizeBase,\n    '.ag-center-cols-viewport': {\n      ...getShadowScrollStyles(theme, {\n        orientation: 'horizontal',\n      }),\n    },\n  },\n});\n","import { compact, uniq, uniqBy } from 'lodash';\nimport { useMemo } from 'react';\nimport type {\n  UseGetRunQueryResponseInputs,\n  UseGetRunQueryResponseOutputs,\n  UseGetRunQueryResponseRunInfo,\n} from '../../components/run-page/hooks/useGetRunQuery';\nimport type { LoggedModelProto, RunInfoEntity } from '../../types';\nimport { useGetLoggedModelQueries } from './useGetLoggedModelQuery';\n\ntype LoggedModelProtoWithRunDirection = LoggedModelProto & { direction: 'input' | 'output'; step?: string };\n\nconst filterMetricsByMatchingRunId = (runUuid?: string | null) => (loggedModel: LoggedModelProtoWithRunDirection) => {\n  if (loggedModel.data?.metrics) {\n    return {\n      ...loggedModel,\n      data: {\n        ...loggedModel.data,\n        metrics: loggedModel.data.metrics.filter((metric) => !runUuid || metric.run_id === runUuid),\n      },\n    };\n  }\n  return loggedModel;\n};\n\nexport const useCombinedRunInputsOutputsModels = (\n  inputs?: UseGetRunQueryResponseInputs,\n  outputs?: UseGetRunQueryResponseOutputs,\n  runInfo?: RunInfoEntity | UseGetRunQueryResponseRunInfo,\n) => {\n  const inputModelIds = compact(uniq(inputs?.modelInputs?.map((modelInput) => modelInput.modelId)));\n  const outputModelIds = compact(uniq(outputs?.modelOutputs?.map((modelOutput) => modelOutput.modelId)));\n  const inputModelQueries = useGetLoggedModelQueries(inputModelIds);\n  const outputModelQueries = useGetLoggedModelQueries(outputModelIds);\n\n  const inputLoggedModels = useMemo(() => {\n    return inputModelQueries.map<LoggedModelProtoWithRunDirection | undefined>((query) => {\n      if (!query.data?.model) return undefined;\n      return { ...query.data?.model, direction: 'input' as const };\n    });\n  }, [inputModelQueries]);\n\n  const outputLoggedModels = useMemo(() => {\n    return outputModelQueries.map<LoggedModelProtoWithRunDirection | undefined>((query) => {\n      if (!query.data?.model) return undefined;\n      const correspondingOutputEntry = outputs?.modelOutputs?.find(\n        ({ modelId }) => modelId === query.data?.model?.info?.model_id,\n      );\n      return { ...query.data?.model, direction: 'output' as const, step: correspondingOutputEntry?.step ?? undefined };\n    });\n  }, [outputModelQueries, outputs?.modelOutputs]);\n\n  const models = useMemo(() => {\n    return (\n      uniqBy(\n        compact([...inputLoggedModels, ...outputLoggedModels]).map(filterMetricsByMatchingRunId(runInfo?.runUuid)),\n        (modelData) => modelData.info?.model_id,\n      ) ?? []\n    );\n  }, [inputLoggedModels, outputLoggedModels, runInfo]);\n\n  const errors = [...inputModelQueries, ...outputModelQueries].map((query) => query.error).filter(Boolean);\n\n  const isLoading = [...inputModelQueries, ...outputModelQueries].some((query) => query.isLoading);\n\n  return { models, errors, isLoading };\n};\n","import { Overflow, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { useState } from 'react';\nimport type { KeyValueEntity, RunDatasetWithTags, RunInfoEntity } from '../../../types';\nimport {\n  DatasetWithRunType,\n  ExperimentViewDatasetDrawer,\n} from '../../experiment-page/components/runs/ExperimentViewDatasetDrawer';\nimport { ExperimentViewDatasetWithContext } from '../../experiment-page/components/runs/ExperimentViewDatasetWithContext';\nimport type { UseGetRunQueryResponseRunInfo } from '../hooks/useGetRunQuery';\n\n/**\n * Displays run datasets section in run detail overview.\n */\nexport const RunViewDatasetBoxV2 = ({\n  tags,\n  runInfo,\n  datasets,\n}: {\n  tags: Record<string, KeyValueEntity>;\n  runInfo: RunInfoEntity | UseGetRunQueryResponseRunInfo;\n  datasets: RunDatasetWithTags[];\n}) => {\n  const [selectedDatasetWithRun, setSelectedDatasetWithRun] = useState<DatasetWithRunType | null>(null);\n  const [isDrawerOpen, setIsDrawerOpen] = useState(false);\n  const { theme } = useDesignSystemTheme();\n\n  if (!datasets || !datasets.length) {\n    return null;\n  }\n\n  const datasetClicked = (dataset: RunDatasetWithTags) => {\n    setSelectedDatasetWithRun({\n      datasetWithTags: dataset,\n      runData: {\n        experimentId: runInfo.experimentId ?? undefined,\n        runUuid: runInfo.runUuid ?? '',\n        runName: runInfo.runName ?? undefined,\n        datasets: datasets,\n        tags: tags,\n      },\n    });\n    setIsDrawerOpen(true);\n  };\n\n  return (\n    <>\n      <Overflow>\n        {datasets.map((datasetWithTags) => (\n          <Typography.Link\n            componentId=\"mlflow.run_details.datasets_box.dataset_link\"\n            css={{\n              textAlign: 'left',\n              '.anticon': {\n                fontSize: theme.general.iconFontSize,\n              },\n            }}\n            onClick={() => datasetClicked(datasetWithTags)}\n          >\n            <ExperimentViewDatasetWithContext datasetWithTags={datasetWithTags} displayTextAsLink css={{ margin: 0 }} />\n          </Typography.Link>\n        ))}\n      </Overflow>\n      {selectedDatasetWithRun && (\n        <ExperimentViewDatasetDrawer\n          isOpen={isDrawerOpen}\n          setIsOpen={setIsDrawerOpen}\n          selectedDatasetWithRun={selectedDatasetWithRun}\n          setSelectedDatasetWithRun={setSelectedDatasetWithRun}\n        />\n      )}\n    </>\n  );\n};\n","import { Button, FileIcon, useDesignSystemTheme } from '@databricks/design-system';\nimport { KeyValueProperty, NoneCell, SecondarySections } from '@databricks/web-shared/utils';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { KeyValueEntity, LoggedModelProto, RunDatasetWithTags, RunInfoEntity } from '../../../types';\nimport { UseGetRunQueryResponseRunInfo } from './useGetRunQuery';\nimport Utils from '../../../../common/utils/Utils';\nimport { RunViewTagsBox } from '../overview/RunViewTagsBox';\nimport { RunViewUserLinkBox } from '../overview/RunViewUserLinkBox';\nimport { DetailsOverviewCopyableIdBox } from '../../DetailsOverviewCopyableIdBox';\nimport { RunViewStatusBox } from '../overview/RunViewStatusBox';\nimport { RunViewParentRunBox } from '../overview/RunViewParentRunBox';\nimport { EXPERIMENT_PARENT_ID_TAG } from '../../experiment-page/utils/experimentPage.common-utils';\nimport { RunViewDatasetBoxV2 } from '../overview/RunViewDatasetBoxV2';\nimport { RunViewSourceBox } from '../overview/RunViewSourceBox';\nimport { Link, useLocation } from '../../../../common/utils/RoutingUtils';\nimport { RunViewLoggedModelsBox } from '../overview/RunViewLoggedModelsBox';\nimport { useMemo } from 'react';\nimport { RunPageModelVersionSummary } from './useUnifiedRegisteredModelVersionsSummariesForRun';\nimport { RunViewRegisteredModelsBox } from '../overview/RunViewRegisteredModelsBox';\nimport Routes from '../../../routes';\n\nenum RunDetailsPageMetadataSections {\n  DETAILS = 'DETAILS',\n  DATASETS = 'DATASETS',\n  TAGS = 'TAGS',\n  REGISTERED_MODELS = 'REGISTERED_MODELS',\n}\n\nexport const useRunDetailsPageOverviewSectionsV2 = ({\n  runUuid,\n  runInfo,\n  tags,\n  onTagsUpdated,\n  datasets,\n  shouldRenderLoggedModelsBox,\n  loggedModelsV3,\n  registeredModelVersionSummaries,\n}: {\n  runUuid: string;\n  runInfo: RunInfoEntity | UseGetRunQueryResponseRunInfo;\n  tags: Record<string, KeyValueEntity>;\n  onTagsUpdated: () => void;\n  datasets?: RunDatasetWithTags[];\n  shouldRenderLoggedModelsBox?: boolean;\n  loggedModelsV3: LoggedModelProto[];\n  registeredModelVersionSummaries: RunPageModelVersionSummary[];\n}): SecondarySections => {\n  const intl = useIntl();\n  const { theme } = useDesignSystemTheme();\n  const { search } = useLocation();\n  const loggedModelsFromTags = useMemo(() => Utils.getLoggedModelsFromTags(tags), [tags]);\n\n  const parentRunIdTag = tags[EXPERIMENT_PARENT_ID_TAG];\n\n  const detailsContent = runInfo && (\n    <>\n      <KeyValueProperty\n        keyValue={intl.formatMessage({\n          defaultMessage: 'Created at',\n          description: 'Run page > Overview > Run start time section label',\n        })}\n        value={runInfo.startTime ? Utils.formatTimestamp(runInfo.startTime, intl) : <NoneCell />}\n      />\n      <KeyValueProperty\n        keyValue={intl.formatMessage({\n          defaultMessage: 'Created by',\n          description: 'Run page > Overview > Run author section label',\n        })}\n        value={<RunViewUserLinkBox runInfo={runInfo} tags={tags} />}\n      />\n      <KeyValueProperty\n        keyValue={intl.formatMessage({\n          defaultMessage: 'Experiment ID',\n          description: 'Run page > Overview > experiment ID section label',\n        })}\n        value={\n          <DetailsOverviewCopyableIdBox\n            value={runInfo?.experimentId ?? ''}\n            element={\n              runInfo?.experimentId ? (\n                <Link to={Routes.getExperimentPageRoute(runInfo.experimentId)}>{runInfo?.experimentId}</Link>\n              ) : undefined\n            }\n          />\n        }\n      />\n      <KeyValueProperty\n        keyValue={intl.formatMessage({\n          defaultMessage: 'Status',\n          description: 'Run page > Overview > Run status section label',\n        })}\n        value={<RunViewStatusBox status={runInfo.status} />}\n      />\n\n      <KeyValueProperty\n        keyValue={intl.formatMessage({\n          defaultMessage: 'Run ID',\n          description: 'Run page > Overview > Run ID section label',\n        })}\n        value={<DetailsOverviewCopyableIdBox value={runInfo.runUuid ?? ''} />}\n      />\n\n      <KeyValueProperty\n        keyValue={intl.formatMessage({\n          defaultMessage: 'Duration',\n          description: 'Run page > Overview > Run duration section label',\n        })}\n        value={Utils.getDuration(runInfo.startTime, runInfo.endTime)}\n      />\n\n      {parentRunIdTag && (\n        <KeyValueProperty\n          keyValue={intl.formatMessage({\n            defaultMessage: 'Parent run',\n            description: 'Run page > Overview > Parent run',\n          })}\n          value={<RunViewParentRunBox parentRunUuid={parentRunIdTag.value} />}\n        />\n      )}\n      <KeyValueProperty\n        keyValue={intl.formatMessage({\n          defaultMessage: 'Source',\n          description: 'Run page > Overview > Run source section label',\n        })}\n        value={\n          <RunViewSourceBox\n            tags={tags}\n            search={search}\n            runUuid={runUuid}\n            css={{\n              paddingTop: theme.spacing.xs,\n              paddingBottom: theme.spacing.xs,\n            }}\n          />\n        }\n      />\n      {shouldRenderLoggedModelsBox && (\n        <KeyValueProperty\n          keyValue={intl.formatMessage({\n            defaultMessage: 'Logged models',\n            description: 'Run page > Overview > Run models section label',\n          })}\n          value={\n            <RunViewLoggedModelsBox\n              // Pass the run info and logged models\n              runInfo={runInfo}\n              loggedModels={loggedModelsFromTags}\n              loggedModelsV3={loggedModelsV3}\n            />\n          }\n        />\n      )}\n    </>\n  );\n\n  return [\n    {\n      id: RunDetailsPageMetadataSections.DETAILS,\n      title: intl.formatMessage({\n        defaultMessage: 'About this run',\n        description: 'Title for the details/metadata section on the run details page',\n      }),\n      content: detailsContent,\n    },\n    {\n      id: RunDetailsPageMetadataSections.DATASETS,\n      title: intl.formatMessage({\n        defaultMessage: 'Datasets',\n        description: 'Title for the datasets section on the run details page',\n      }),\n      content: datasets?.length ? (\n        <RunViewDatasetBoxV2 tags={tags} runInfo={runInfo} datasets={datasets} />\n      ) : (\n        <NoneCell />\n      ),\n    },\n    {\n      id: RunDetailsPageMetadataSections.TAGS,\n      title: intl.formatMessage({\n        defaultMessage: 'Tags',\n        description: 'Title for the tags section on the run details page',\n      }),\n      content: <RunViewTagsBox runUuid={runInfo.runUuid ?? ''} tags={tags} onTagsUpdated={onTagsUpdated} />,\n    },\n    {\n      id: RunDetailsPageMetadataSections.REGISTERED_MODELS,\n      title: intl.formatMessage({\n        defaultMessage: 'Registered models',\n        description: 'Title for the registered models section on the run details page',\n      }),\n      content:\n        registeredModelVersionSummaries?.length > 0 ? (\n          <RunViewRegisteredModelsBox registeredModelVersionSummaries={registeredModelVersionSummaries} />\n        ) : (\n          <NoneCell />\n        ),\n    },\n  ];\n};\n","import { FormattedMessage, useIntl } from 'react-intl';\nimport { useSelector } from 'react-redux';\nimport { useMemo } from 'react';\n\nimport { Button, FileIcon, Spacer, Spinner, Typography, useDesignSystemTheme } from '@databricks/design-system';\n\nimport Utils from '../../../common/utils/Utils';\nimport type { ReduxState } from '../../../redux-types';\nimport { useLocation } from '../../../common/utils/RoutingUtils';\nimport { EXPERIMENT_PARENT_ID_TAG } from '../experiment-page/utils/experimentPage.common-utils';\n\nimport { RunViewStatusBox } from './overview/RunViewStatusBox';\nimport { RunViewUserLinkBox } from './overview/RunViewUserLinkBox';\nimport { DetailsOverviewParamsTable } from '../DetailsOverviewParamsTable';\nimport { RunViewMetricsTable } from './overview/RunViewMetricsTable';\nimport { RunViewDatasetBox } from './overview/RunViewDatasetBox';\nimport { RunViewParentRunBox } from './overview/RunViewParentRunBox';\nimport { RunViewTagsBox } from './overview/RunViewTagsBox';\nimport { RunViewDescriptionBox } from './overview/RunViewDescriptionBox';\nimport { DetailsOverviewMetadataRow } from '../DetailsOverviewMetadataRow';\nimport { RunViewRegisteredModelsBox } from './overview/RunViewRegisteredModelsBox';\nimport { RunViewRegisteredPromptsBox } from './overview/RunViewRegisteredPromptsBox';\nimport { RunViewLoggedModelsBox } from './overview/RunViewLoggedModelsBox';\nimport { RunViewSourceBox } from './overview/RunViewSourceBox';\nimport { DetailsOverviewMetadataTable } from '@mlflow/mlflow/src/experiment-tracking/components/DetailsOverviewMetadataTable';\nimport type { LoggedModelProto } from '../../types';\nimport { useExperimentLoggedModelRegisteredVersions } from '../experiment-logged-models/hooks/useExperimentLoggedModelRegisteredVersions';\nimport { DetailsOverviewCopyableIdBox } from '../DetailsOverviewCopyableIdBox';\nimport type { RunInfoEntity } from '../../types';\nimport type {\n  UseGetRunQueryResponseInputs,\n  UseGetRunQueryResponseOutputs,\n  UseGetRunQueryResponseRunInfo,\n} from './hooks/useGetRunQuery';\nimport type { KeyValueEntity, MetricEntitiesByName, RunDatasetWithTags } from '../../types';\nimport { type RunPageModelVersionSummary } from './hooks/useUnifiedRegisteredModelVersionsSummariesForRun';\nimport { isEmpty, uniqBy } from 'lodash';\nimport { RunViewLoggedModelsTable } from './overview/RunViewLoggedModelsTable';\nimport { isRunPageLoggedModelsTableEnabled } from '../../../common/utils/FeatureUtils';\nimport { useExperimentTrackingDetailsPageLayoutStyles } from '../../hooks/useExperimentTrackingDetailsPageLayoutStyles';\nimport { DetailsPageLayout } from '../../../common/components/details-page-layout/DetailsPageLayout';\nimport { useRunDetailsPageOverviewSectionsV2 } from './hooks/useRunDetailsPageOverviewSectionsV2';\n\nconst EmptyValue = () => <Typography.Hint>—</Typography.Hint>;\n\nexport const RunViewOverview = ({\n  runUuid,\n  onRunDataUpdated,\n  tags,\n  runInfo,\n  datasets,\n  params,\n  latestMetrics,\n  runInputs,\n  runOutputs,\n  registeredModelVersionSummaries: registeredModelVersionSummariesForRun,\n  loggedModelsV3 = [],\n  isLoadingLoggedModels = false,\n}: {\n  runUuid: string;\n  onRunDataUpdated: () => void | Promise<any>;\n  runInfo: RunInfoEntity | UseGetRunQueryResponseRunInfo;\n  tags: Record<string, KeyValueEntity>;\n  latestMetrics: MetricEntitiesByName;\n  runInputs?: UseGetRunQueryResponseInputs;\n  runOutputs?: UseGetRunQueryResponseOutputs;\n  datasets?: RunDatasetWithTags[];\n  params: Record<string, KeyValueEntity>;\n  registeredModelVersionSummaries: RunPageModelVersionSummary[];\n  loggedModelsV3?: LoggedModelProto[];\n  isLoadingLoggedModels?: boolean;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const { usingUnifiedDetailsLayout } = useExperimentTrackingDetailsPageLayoutStyles();\n  const { search } = useLocation();\n  const intl = useIntl();\n\n  const loggedModelsFromTags = useMemo(() => Utils.getLoggedModelsFromTags(tags), [tags]);\n  const parentRunIdTag = tags[EXPERIMENT_PARENT_ID_TAG];\n  const containsLoggedModelsFromInputsOutputs = !isEmpty(runInputs?.modelInputs) || !isEmpty(runOutputs?.modelOutputs);\n  const shouldRenderLoggedModelsBox = !isRunPageLoggedModelsTableEnabled() || !containsLoggedModelsFromInputsOutputs;\n\n  // We have two flags for controlling the visibility of the \"logged models\" section:\n  // - `shouldRenderLoggedModelsBox` determines if \"logged models\" section should be rendered.\n  //   It is hidden if any IAv3 logged models are detected in inputs/outputs, in this case we're\n  //   displaying a big table instead.\n  // - `shouldDisplayContentsOfLoggedModelsBox` determines if the contents of the \"logged models\"\n  //   section should be displayed. It is hidden if there are no logged models to display.\n  const shouldDisplayContentsOfLoggedModelsBox = loggedModelsFromTags?.length > 0 || loggedModelsV3?.length > 0;\n  const loggedModelsV3RegisteredModels = useExperimentLoggedModelRegisteredVersions({ loggedModels: loggedModelsV3 });\n\n  /**\n   * We have to query multiple sources for registered model versions (logged models API, models API, UC)\n   * and it's possible to end up with duplicates.\n   * We can dedupe them using `link` field, which should be unique for each model.\n   */\n  const registeredModelVersionSummaries = uniqBy(\n    [...registeredModelVersionSummariesForRun, ...loggedModelsV3RegisteredModels],\n    (model) => model?.link,\n  );\n\n  const renderPromptMetadataRow = () => {\n    return (\n      <DetailsOverviewMetadataRow\n        title={\n          <FormattedMessage\n            defaultMessage=\"Registered prompts\"\n            description=\"Run page > Overview > Run prompts section label\"\n          />\n        }\n        value={<RunViewRegisteredPromptsBox runUuid={runUuid} />}\n      />\n    );\n  };\n\n  const renderDetails = () => {\n    return (\n      <DetailsOverviewMetadataTable>\n        <DetailsOverviewMetadataRow\n          title={\n            <FormattedMessage\n              defaultMessage=\"Created at\"\n              description=\"Run page > Overview > Run start time section label\"\n            />\n          }\n          value={runInfo.startTime ? Utils.formatTimestamp(runInfo.startTime, intl) : <EmptyValue />}\n        />\n        <DetailsOverviewMetadataRow\n          title={\n            <FormattedMessage\n              defaultMessage=\"Created by\"\n              description=\"Run page > Overview > Run author section label\"\n            />\n          }\n          value={<RunViewUserLinkBox runInfo={runInfo} tags={tags} />}\n        />\n        <DetailsOverviewMetadataRow\n          title={\n            <FormattedMessage\n              defaultMessage=\"Experiment ID\"\n              description=\"Run page > Overview > experiment ID section label\"\n            />\n          }\n          value={<DetailsOverviewCopyableIdBox value={runInfo?.experimentId ?? ''} />}\n        />\n        <DetailsOverviewMetadataRow\n          title={\n            <FormattedMessage defaultMessage=\"Status\" description=\"Run page > Overview > Run status section label\" />\n          }\n          value={<RunViewStatusBox status={runInfo.status} />}\n        />\n        <DetailsOverviewMetadataRow\n          title={<FormattedMessage defaultMessage=\"Run ID\" description=\"Run page > Overview > Run ID section label\" />}\n          value={<DetailsOverviewCopyableIdBox value={runInfo.runUuid ?? ''} />}\n        />\n        <DetailsOverviewMetadataRow\n          title={\n            <FormattedMessage\n              defaultMessage=\"Duration\"\n              description=\"Run page > Overview > Run duration section label\"\n            />\n          }\n          value={Utils.getDuration(runInfo.startTime, runInfo.endTime)}\n        />\n        {parentRunIdTag && (\n          <DetailsOverviewMetadataRow\n            title={<FormattedMessage defaultMessage=\"Parent run\" description=\"Run page > Overview > Parent run\" />}\n            value={<RunViewParentRunBox parentRunUuid={parentRunIdTag.value} />}\n          />\n        )}\n        <DetailsOverviewMetadataRow\n          title={\n            <FormattedMessage\n              defaultMessage=\"Datasets used\"\n              description=\"Run page > Overview > Run datasets section label\"\n            />\n          }\n          value={\n            datasets?.length ? <RunViewDatasetBox tags={tags} runInfo={runInfo} datasets={datasets} /> : <EmptyValue />\n          }\n        />\n        <DetailsOverviewMetadataRow\n          title={<FormattedMessage defaultMessage=\"Tags\" description=\"Run page > Overview > Run tags section label\" />}\n          value={<RunViewTagsBox runUuid={runInfo.runUuid ?? ''} tags={tags} onTagsUpdated={onRunDataUpdated} />}\n        />\n        <DetailsOverviewMetadataRow\n          title={\n            <FormattedMessage defaultMessage=\"Source\" description=\"Run page > Overview > Run source section label\" />\n          }\n          value={<RunViewSourceBox tags={tags} search={search} runUuid={runUuid} />}\n        />\n        {shouldRenderLoggedModelsBox && (\n          <DetailsOverviewMetadataRow\n            title={\n              <FormattedMessage\n                defaultMessage=\"Logged models\"\n                description=\"Run page > Overview > Run models section label\"\n              />\n            }\n            value={\n              isLoadingLoggedModels ? (\n                <Spinner />\n              ) : shouldDisplayContentsOfLoggedModelsBox ? (\n                <RunViewLoggedModelsBox\n                  // Pass the run info and logged models\n                  runInfo={runInfo}\n                  loggedModels={loggedModelsFromTags}\n                  // Provide loggedModels from IA v3\n                  loggedModelsV3={loggedModelsV3}\n                />\n              ) : (\n                <EmptyValue />\n              )\n            }\n          />\n        )}\n        <DetailsOverviewMetadataRow\n          title={\n            <FormattedMessage\n              defaultMessage=\"Registered models\"\n              description=\"Run page > Overview > Run models section label\"\n            />\n          }\n          value={\n            registeredModelVersionSummaries?.length > 0 ? (\n              <RunViewRegisteredModelsBox registeredModelVersionSummaries={registeredModelVersionSummaries} />\n            ) : (\n              <EmptyValue />\n            )\n          }\n        />\n        {renderPromptMetadataRow()}\n      </DetailsOverviewMetadataTable>\n    );\n  };\n\n  const renderParams = () => {\n    return <DetailsOverviewParamsTable params={params} />;\n  };\n\n  const detailsSectionsV2 = useRunDetailsPageOverviewSectionsV2({\n    runUuid,\n    runInfo,\n    tags,\n    onTagsUpdated: onRunDataUpdated,\n    datasets,\n    loggedModelsV3,\n    shouldRenderLoggedModelsBox,\n    registeredModelVersionSummaries,\n  });\n  const usingSidebarLayout = usingUnifiedDetailsLayout;\n  return (\n    <DetailsPageLayout\n      css={{ flex: 1, alignSelf: 'flex-start' }}\n      //\n      // Enable sidebar layout based on feature flag\n      usingSidebarLayout={usingSidebarLayout}\n      secondarySections={detailsSectionsV2}\n    >\n      <RunViewDescriptionBox runUuid={runUuid} tags={tags} onDescriptionChanged={onRunDataUpdated} />\n      {!usingSidebarLayout && (\n        <>\n          <Typography.Title level={4}>\n            <FormattedMessage defaultMessage=\"Details\" description=\"Run page > Overview > Details section title\" />\n          </Typography.Title>\n          {renderDetails()}\n        </>\n      )}\n      <div\n        // Use different grid setup for unified details page layout\n        css={[\n          usingSidebarLayout ? { flexDirection: 'column' } : { minHeight: 360, maxHeight: 760 },\n          { display: 'flex', gap: theme.spacing.lg, overflow: 'hidden' },\n        ]}\n      >\n        <RunViewMetricsTable latestMetrics={latestMetrics} runInfo={runInfo} />\n        {renderParams()}\n      </div>\n      {isRunPageLoggedModelsTableEnabled() && containsLoggedModelsFromInputsOutputs && (\n        <>\n          <Spacer />\n          <div css={{ minHeight: 360, maxHeight: 760, overflow: 'hidden', display: 'flex' }}>\n            <RunViewLoggedModelsTable inputs={runInputs} outputs={runOutputs} runInfo={runInfo} />\n          </div>\n        </>\n      )}\n      {!usingSidebarLayout && <Spacer />}\n    </DetailsPageLayout>\n  );\n};\n","import Routes from '../routes';\nimport { ErrorView } from '../../common/components/ErrorView';\n\ntype Props = {\n  runId: string;\n};\n\nexport function RunNotFoundView({ runId }: Props) {\n  return (\n    <ErrorView\n      statusCode={404}\n      subMessage={`Run ID ${runId} does not exist`}\n      fallbackHomePageReactRoute={Routes.rootRoute}\n    />\n  );\n}\n","import type { MetricHistoryByName, RunInfoEntity } from '../../types';\nimport {\n  containsMultipleRunsTooltipData,\n  RunsChartsTooltipMode,\n  type RunsChartsTooltipBodyProps,\n} from '../runs-charts/hooks/useRunsChartsTooltip';\nimport { isSystemMetricKey } from '../../utils/MetricsUtils';\nimport Utils from '../../../common/utils/Utils';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { isUndefined } from 'lodash';\nimport type {\n  RunsCompareMultipleTracesTooltipData,\n  RunsMetricsSingleTraceTooltipData,\n} from '../runs-charts/components/RunsMetricsLinePlot';\nimport type { RunsMetricsBarPlotHoverData } from '../runs-charts/components/RunsMetricsBarPlot';\nimport { RunsMultipleTracesTooltipBody } from '../runs-charts/components/RunsMultipleTracesTooltipBody';\nimport { Spacer, Typography } from '@databricks/design-system';\n\n/**\n * Tooltip body displayed when hovering over run view metric charts\n */\nexport const RunViewChartTooltipBody = ({\n  contextData: { metricsForRun },\n  hoverData,\n  chartData: { metricKey },\n  isHovering,\n  mode,\n}: RunsChartsTooltipBodyProps<\n  { metricsForRun: MetricHistoryByName },\n  { metricKey: string },\n  RunsMetricsBarPlotHoverData | RunsMetricsSingleTraceTooltipData | RunsCompareMultipleTracesTooltipData\n>) => {\n  const singleTraceHoverData = containsMultipleRunsTooltipData(hoverData) ? hoverData.hoveredDataPoint : hoverData;\n  const intl = useIntl();\n\n  if (\n    mode === RunsChartsTooltipMode.MultipleTracesWithScanline &&\n    containsMultipleRunsTooltipData(hoverData) &&\n    isHovering\n  ) {\n    return <RunsMultipleTracesTooltipBody hoverData={hoverData} />;\n  }\n\n  if (!singleTraceHoverData?.metricEntity) {\n    return null;\n  }\n\n  const { timestamp, step, value } = singleTraceHoverData.metricEntity;\n\n  const metricContainsHistory = metricsForRun?.[metricKey]?.length > 1;\n  const isSystemMetric = isSystemMetricKey(metricKey);\n  const displayTimestamp = metricContainsHistory && isSystemMetric && !isUndefined(timestamp);\n  const displayStep = metricContainsHistory && !isSystemMetric && !isUndefined(step);\n\n  return (\n    <div>\n      {displayStep && (\n        <div css={styles.valueField}>\n          <strong>\n            <FormattedMessage defaultMessage=\"Step\" description=\"Run page > Charts tab > Chart tooltip > Step label\" />:\n          </strong>{' '}\n          {step}\n        </div>\n      )}\n      {displayTimestamp && (\n        <div css={styles.valueField}>\n          <strong>\n            <FormattedMessage\n              defaultMessage=\"Timestamp\"\n              description=\"Run page > Charts tab > Chart tooltip > Timestamp label\"\n            />\n            :\n          </strong>{' '}\n          {Utils.formatTimestamp(timestamp, intl)}\n        </div>\n      )}\n      {value && (\n        <div>\n          <Typography.Text bold>{metricKey}</Typography.Text>\n          <Spacer size=\"xs\" />\n          <Typography.Text>{value}</Typography.Text>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst styles = {\n  valueField: {\n    whiteSpace: 'nowrap' as const,\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n  },\n};\n","import { TableSkeleton, ToggleButton, useDesignSystemTheme } from '@databricks/design-system';\nimport { compact, mapValues, values } from 'lodash';\nimport { ReactNode, useEffect, useMemo, useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { useSelector } from 'react-redux';\nimport { ReduxState } from '../../../redux-types';\nimport type { KeyValueEntity, MetricEntitiesByName, RunInfoEntity } from '../../types';\n\nimport { RunsChartsTooltipWrapper } from '../runs-charts/hooks/useRunsChartsTooltip';\nimport { RunViewChartTooltipBody } from './RunViewChartTooltipBody';\nimport { RunsChartType, RunsChartsCardConfig } from '../runs-charts/runs-charts.types';\nimport type { RunsChartsRunData } from '../runs-charts/components/RunsCharts.common';\nimport { RunsChartsLineChartXAxisType } from '../runs-charts/components/RunsCharts.common';\nimport type { ExperimentRunsChartsUIConfiguration } from '../experiment-page/models/ExperimentPageUIState';\nimport { RunsChartsSectionAccordion } from '../runs-charts/components/sections/RunsChartsSectionAccordion';\nimport { RunsChartsConfigureModal } from '../runs-charts/components/RunsChartsConfigureModal';\nimport {\n  RunsChartsUIConfigurationContextProvider,\n  useConfirmChartCardConfigurationFn,\n  useInsertRunsChartsFn,\n  useRemoveRunsChartFn,\n  useReorderRunsChartsFn,\n} from '../runs-charts/hooks/useRunsChartsUIConfiguration';\nimport {\n  LOG_IMAGE_TAG_INDICATOR,\n  MLFLOW_MODEL_METRIC_NAME,\n  MLFLOW_SYSTEM_METRIC_NAME,\n  MLFLOW_SYSTEM_METRIC_PREFIX,\n} from '../../constants';\nimport LocalStorageUtils from '../../../common/utils/LocalStorageUtils';\nimport { RunsChartsFullScreenModal } from '../runs-charts/components/RunsChartsFullScreenModal';\nimport { useIsTabActive } from '../../../common/hooks/useIsTabActive';\nimport { shouldEnableRunDetailsPageAutoRefresh } from '../../../common/utils/FeatureUtils';\nimport { usePopulateImagesByRunUuid } from '../experiment-page/hooks/usePopulateImagesByRunUuid';\nimport type { UseGetRunQueryResponseRunInfo } from './hooks/useGetRunQuery';\nimport { RunsChartsGlobalChartSettingsDropdown } from '../runs-charts/components/RunsChartsGlobalChartSettingsDropdown';\nimport { RunsChartsDraggableCardsGridContextProvider } from '../runs-charts/components/RunsChartsDraggableCardsGridContext';\nimport { RunsChartsFilterInput } from '../runs-charts/components/RunsChartsFilterInput';\n\ninterface RunViewMetricChartsProps {\n  metricKeys: string[];\n  runInfo: RunInfoEntity | UseGetRunQueryResponseRunInfo;\n  /**\n   * Whether to display model or system metrics. This affects labels and tooltips.\n   */\n  mode: 'model' | 'system';\n\n  latestMetrics?: MetricEntitiesByName;\n  tags?: Record<string, KeyValueEntity>;\n  params?: Record<string, KeyValueEntity>;\n}\n\n/**\n * Component displaying metric charts for a single run\n */\nconst RunViewMetricChartsImpl = ({\n  runInfo,\n  metricKeys,\n  mode,\n  chartUIState,\n  updateChartsUIState,\n  latestMetrics = {},\n  params = {},\n  tags = {},\n}: RunViewMetricChartsProps & {\n  chartUIState: ExperimentRunsChartsUIConfiguration;\n  updateChartsUIState: (\n    stateSetter: (state: ExperimentRunsChartsUIConfiguration) => ExperimentRunsChartsUIConfiguration,\n  ) => void;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const [search, setSearch] = useState('');\n  const { formatMessage } = useIntl();\n\n  const { compareRunCharts, compareRunSections, chartsSearchFilter } = chartUIState;\n\n  // For the draggable grid layout, we filter visible cards on this level\n  const visibleChartCards = useMemo(() => {\n    return compareRunCharts?.filter((chart) => !chart.deleted) ?? [];\n  }, [compareRunCharts]);\n\n  const [fullScreenChart, setFullScreenChart] = useState<\n    | {\n        config: RunsChartsCardConfig;\n        title: string | ReactNode;\n        subtitle: ReactNode;\n      }\n    | undefined\n  >(undefined);\n\n  const metricsForRun = useSelector(({ entities }: ReduxState) => {\n    return mapValues(entities.sampledMetricsByRunUuid[runInfo.runUuid ?? ''], (metricsByRange) => {\n      return compact(\n        values(metricsByRange)\n          .map(({ metricsHistory }) => metricsHistory)\n          .flat(),\n      );\n    });\n  });\n\n  const tooltipContextValue = useMemo(() => ({ runInfo, metricsForRun }), [runInfo, metricsForRun]);\n\n  const { imagesByRunUuid } = useSelector((state: ReduxState) => ({\n    imagesByRunUuid: state.entities.imagesByRunUuid,\n  }));\n\n  const [configuredCardConfig, setConfiguredCardConfig] = useState<RunsChartsCardConfig | null>(null);\n\n  const reorderCharts = useReorderRunsChartsFn();\n\n  const addNewChartCard = (metricSectionId: string) => (type: RunsChartType) =>\n    setConfiguredCardConfig(RunsChartsCardConfig.getEmptyChartCardByType(type, false, undefined, metricSectionId));\n\n  const insertCharts = useInsertRunsChartsFn();\n\n  const startEditChart = (chartCard: RunsChartsCardConfig) => setConfiguredCardConfig(chartCard);\n\n  const removeChart = useRemoveRunsChartFn();\n\n  const confirmChartCardConfiguration = useConfirmChartCardConfigurationFn();\n\n  const submitForm = (configuredCard: Partial<RunsChartsCardConfig>) => {\n    confirmChartCardConfiguration(configuredCard);\n\n    // Hide the modal\n    setConfiguredCardConfig(null);\n  };\n\n  // Create a single run data object to be used in charts\n  const chartData: RunsChartsRunData[] = useMemo(\n    () => [\n      {\n        displayName: runInfo.runName ?? '',\n        metrics: latestMetrics,\n        params,\n        tags,\n        images: imagesByRunUuid[runInfo.runUuid ?? ''] || {},\n        metricHistory: {},\n        uuid: runInfo.runUuid ?? '',\n        color: theme.colors.primary,\n        runInfo,\n      },\n    ],\n    [runInfo, latestMetrics, params, tags, imagesByRunUuid, theme],\n  );\n\n  useEffect(() => {\n    if ((!compareRunSections || !compareRunCharts) && chartData.length > 0) {\n      const { resultChartSet, resultSectionSet } = RunsChartsCardConfig.getBaseChartAndSectionConfigs({\n        runsData: chartData,\n        enabledSectionNames: [mode === 'model' ? MLFLOW_MODEL_METRIC_NAME : MLFLOW_SYSTEM_METRIC_NAME],\n        // Filter only model or system metrics\n        filterMetricNames: (name) => {\n          const isSystemMetric = name.startsWith(MLFLOW_SYSTEM_METRIC_PREFIX);\n          return mode === 'model' ? !isSystemMetric : isSystemMetric;\n        },\n      });\n\n      updateChartsUIState((current) => ({\n        ...current,\n        compareRunCharts: resultChartSet,\n        compareRunSections: resultSectionSet,\n      }));\n    }\n  }, [compareRunCharts, compareRunSections, chartData, mode, updateChartsUIState]);\n\n  /**\n   * Update charts with the latest metrics if new are found\n   */\n  useEffect(() => {\n    updateChartsUIState((current) => {\n      if (!current.compareRunCharts || !current.compareRunSections) {\n        return current;\n      }\n      const { resultChartSet, resultSectionSet, isResultUpdated } = RunsChartsCardConfig.updateChartAndSectionConfigs({\n        compareRunCharts: current.compareRunCharts,\n        compareRunSections: current.compareRunSections,\n        runsData: chartData,\n        isAccordionReordered: current.isAccordionReordered,\n        // Filter only model or system metrics\n        filterMetricNames: (name) => {\n          const isSystemMetric = name.startsWith(MLFLOW_SYSTEM_METRIC_PREFIX);\n          return mode === 'model' ? !isSystemMetric : isSystemMetric;\n        },\n      });\n\n      if (!isResultUpdated) {\n        return current;\n      }\n      return {\n        ...current,\n        compareRunCharts: resultChartSet,\n        compareRunSections: resultSectionSet,\n      };\n    });\n  }, [chartData, updateChartsUIState, mode]);\n\n  const isTabActive = useIsTabActive();\n  const autoRefreshEnabled = chartUIState.autoRefreshEnabled && shouldEnableRunDetailsPageAutoRefresh() && isTabActive;\n\n  // Determine if run contains images logged by `mlflow.log_image()`\n  const containsLoggedImages = Boolean(tags[LOG_IMAGE_TAG_INDICATOR]);\n\n  usePopulateImagesByRunUuid({\n    runUuids: [runInfo.runUuid ?? ''],\n    runUuidsIsActive: [runInfo.status === 'RUNNING'],\n    autoRefreshEnabled,\n    enabled: containsLoggedImages,\n  });\n\n  return (\n    <div\n      css={{\n        flex: 1,\n        display: 'flex',\n        flexDirection: 'column',\n        overflow: 'hidden',\n      }}\n    >\n      <div\n        css={{\n          paddingBottom: theme.spacing.md,\n          display: 'flex',\n          gap: theme.spacing.sm,\n          flex: '0 0 auto',\n        }}\n      >\n        <RunsChartsFilterInput chartsSearchFilter={chartsSearchFilter} />\n        {shouldEnableRunDetailsPageAutoRefresh() && (\n          <ToggleButton\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_runviewmetricchartsv2.tsx_244\"\n            pressed={chartUIState.autoRefreshEnabled}\n            onPressedChange={(pressed) => {\n              updateChartsUIState((current) => ({ ...current, autoRefreshEnabled: pressed }));\n            }}\n          >\n            {formatMessage({\n              defaultMessage: 'Auto-refresh',\n              description: 'Run page > Charts tab > Auto-refresh toggle button',\n            })}\n          </ToggleButton>\n        )}\n        <RunsChartsGlobalChartSettingsDropdown\n          metricKeyList={metricKeys}\n          globalLineChartConfig={chartUIState.globalLineChartConfig}\n          updateUIState={updateChartsUIState}\n        />\n      </div>\n      <div\n        css={{\n          flex: 1,\n          overflow: 'auto',\n        }}\n      >\n        <RunsChartsTooltipWrapper contextData={tooltipContextValue} component={RunViewChartTooltipBody}>\n          <RunsChartsDraggableCardsGridContextProvider visibleChartCards={visibleChartCards}>\n            <RunsChartsSectionAccordion\n              compareRunSections={compareRunSections}\n              compareRunCharts={visibleChartCards}\n              reorderCharts={reorderCharts}\n              insertCharts={insertCharts}\n              chartData={chartData}\n              startEditChart={startEditChart}\n              removeChart={removeChart}\n              addNewChartCard={addNewChartCard}\n              search={chartsSearchFilter ?? ''}\n              supportedChartTypes={[RunsChartType.LINE, RunsChartType.BAR, RunsChartType.IMAGE]}\n              setFullScreenChart={setFullScreenChart}\n              autoRefreshEnabled={autoRefreshEnabled}\n              globalLineChartConfig={chartUIState.globalLineChartConfig}\n              groupBy={null}\n            />\n          </RunsChartsDraggableCardsGridContextProvider>\n        </RunsChartsTooltipWrapper>\n      </div>\n      {configuredCardConfig && (\n        <RunsChartsConfigureModal\n          chartRunData={chartData}\n          metricKeyList={metricKeys}\n          paramKeyList={[]}\n          config={configuredCardConfig}\n          onSubmit={submitForm}\n          onCancel={() => setConfiguredCardConfig(null)}\n          groupBy={null}\n          supportedChartTypes={[RunsChartType.LINE, RunsChartType.BAR, RunsChartType.IMAGE]}\n          globalLineChartConfig={chartUIState.globalLineChartConfig}\n        />\n      )}\n      <RunsChartsFullScreenModal\n        fullScreenChart={fullScreenChart}\n        onCancel={() => setFullScreenChart(undefined)}\n        chartData={chartData}\n        tooltipContextValue={tooltipContextValue}\n        tooltipComponent={RunViewChartTooltipBody}\n        autoRefreshEnabled={autoRefreshEnabled}\n        groupBy={null}\n      />\n    </div>\n  );\n};\n\nexport const RunViewMetricCharts = (props: RunViewMetricChartsProps) => {\n  const persistenceIdentifier = `${props.runInfo.runUuid}-${props.mode}`;\n\n  const localStore = useMemo(\n    () => LocalStorageUtils.getStoreForComponent('RunPage', persistenceIdentifier),\n    [persistenceIdentifier],\n  );\n\n  const [chartUIState, updateChartsUIState] = useState<ExperimentRunsChartsUIConfiguration>(() => {\n    const defaultChartState: ExperimentRunsChartsUIConfiguration = {\n      isAccordionReordered: false,\n      compareRunCharts: undefined,\n      compareRunSections: undefined,\n      // Auto-refresh is enabled by default only if the flag is set\n      autoRefreshEnabled: shouldEnableRunDetailsPageAutoRefresh(),\n      globalLineChartConfig: {\n        xAxisKey: RunsChartsLineChartXAxisType.STEP,\n        lineSmoothness: 0,\n        selectedXAxisMetricKey: '',\n      },\n    };\n    try {\n      const persistedChartState = localStore.getItem('chartUIState');\n\n      if (!persistedChartState) {\n        return defaultChartState;\n      }\n      return JSON.parse(persistedChartState);\n    } catch {\n      return defaultChartState;\n    }\n  });\n\n  useEffect(() => {\n    localStore.setItem('chartUIState', JSON.stringify(chartUIState));\n  }, [chartUIState, localStore]);\n\n  return (\n    <RunsChartsUIConfigurationContextProvider updateChartsUIState={updateChartsUIState}>\n      <RunViewMetricChartsImpl {...props} chartUIState={chartUIState} updateChartsUIState={updateChartsUIState} />\n    </RunsChartsUIConfigurationContextProvider>\n  );\n};\n\nconst RunViewMetricChartsSkeleton = ({ className }: { className?: string }) => {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <div\n      css={{\n        flex: 1,\n        display: 'grid',\n        gridTemplateColumns: '1fr 1fr 1fr',\n        gridTemplateRows: '200px',\n        gap: theme.spacing.md,\n      }}\n      className={className}\n    >\n      {new Array(6).fill(null).map((_, index) => (\n        <TableSkeleton key={index} lines={5} seed={index.toString()} />\n      ))}\n    </div>\n  );\n};\n","import { useDesignSystemTheme } from '@databricks/design-system';\nimport type { KeyValueEntity } from '../../types';\nimport ArtifactPage from '../ArtifactPage';\nimport { useMediaQuery } from '@databricks/web-shared/hooks';\nimport { TracesView } from '../traces/TracesView';\nimport { useMemo } from 'react';\nimport { ExperimentViewTracesTableColumns } from '../traces/TracesView.utils';\n\nconst disabledColumns = [ExperimentViewTracesTableColumns.runName];\n\n/**\n * A run page tab containing the artifact browser\n */\nexport const RunViewTracesTab = ({\n  experimentId,\n  runUuid,\n}: {\n  runUuid: string;\n  experimentId: string;\n  runTags: Record<string, KeyValueEntity>;\n}) => {\n  const stableExperimentId = useMemo(() => [experimentId], [experimentId]);\n\n  return (\n    <div css={{ flex: 1, minWidth: 0 }}>\n      <TracesView experimentIds={stableExperimentId} runUuid={runUuid} disabledColumns={disabledColumns} />\n    </div>\n  );\n};\n","import { useMemo } from 'react';\nimport { isExperimentLoggedModelsUIEnabled } from '../../../../common/utils/FeatureUtils';\nimport { useSearchLoggedModelsQuery } from '../../../hooks/logged-models/useSearchLoggedModelsQuery';\n\nexport const useLoggedModelsForExperimentRun = (experimentId: string, runId: string) => {\n  const { data: loggedModelsData, isLoading } = useSearchLoggedModelsQuery(\n    { experimentIds: [experimentId] },\n    {\n      enabled: isExperimentLoggedModelsUIEnabled(),\n    },\n  );\n\n  const models = useMemo(\n    () => loggedModelsData?.filter((model) => model.info?.source_run_id === runId) ?? [],\n    [loggedModelsData, runId],\n  );\n\n  return { models, isLoading: isExperimentLoggedModelsUIEnabled() && isLoading };\n};\n","import { DangerIcon, Empty, ParagraphSkeleton, TitleSkeleton, useDesignSystemTheme } from '@databricks/design-system';\nimport { useSelector } from 'react-redux';\nimport invariant from 'invariant';\nimport { useMemo, useState } from 'react';\n\nimport { PageContainer } from '../../../common/components/PageContainer';\nimport { useNavigate, useParams } from '../../../common/utils/RoutingUtils';\nimport Utils from '../../../common/utils/Utils';\nimport { RunPageTabName } from '../../constants';\nimport { RenameRunModal } from '../modals/RenameRunModal';\nimport { RunViewArtifactTab } from './RunViewArtifactTab';\nimport { RunViewHeader } from './RunViewHeader';\nimport { RunViewOverview } from './RunViewOverview';\nimport { useRunDetailsPageData } from './hooks/useRunDetailsPageData';\nimport { useRunViewActiveTab } from './useRunViewActiveTab';\nimport { ReduxState } from '../../../redux-types';\nimport { ErrorWrapper } from '../../../common/utils/ErrorWrapper';\nimport { RunNotFoundView } from '../RunNotFoundView';\nimport { ErrorCodes } from '../../../common/constants';\nimport NotFoundPage from '../NotFoundPage';\nimport { FormattedMessage } from 'react-intl';\nimport { isSystemMetricKey } from '../../utils/MetricsUtils';\nimport DeleteRunModal from '../modals/DeleteRunModal';\nimport Routes from '../../routes';\nimport { RunViewMetricCharts } from './RunViewMetricCharts';\nimport {\n  shouldEnableRunDetailsPageTracesTab,\n  shouldEnableGraphQLRunDetailsPage,\n} from '@mlflow/mlflow/src/common/utils/FeatureUtils';\nimport { useMediaQuery } from '@databricks/web-shared/hooks';\nimport { RunViewTracesTab } from './RunViewTracesTab';\nimport { getGraphQLErrorMessage } from '../../../graphql/get-graphql-error';\nimport { useLoggedModelsForExperimentRun } from '../experiment-page/hooks/useLoggedModelsForExperimentRun';\n\nconst RunPageLoadingState = () => (\n  <PageContainer>\n    <TitleSkeleton\n      loading\n      label={<FormattedMessage defaultMessage=\"Run page loading\" description=\"Run page > Loading state\" />}\n    />\n    {[...Array(3).keys()].map((i) => (\n      <ParagraphSkeleton key={i} seed={`s-${i}`} />\n    ))}\n  </PageContainer>\n);\n\nexport const RunPage = () => {\n  const { runUuid, experimentId } = useParams<{\n    runUuid: string;\n    experimentId: string;\n  }>();\n  const navigate = useNavigate();\n  const { theme } = useDesignSystemTheme();\n  const [renameModalVisible, setRenameModalVisible] = useState(false);\n  const [deleteModalVisible, setDeleteModalVisible] = useState(false);\n\n  invariant(runUuid, '[RunPage] Run UUID route param not provided');\n  invariant(experimentId, '[RunPage] Experiment ID route param not provided');\n\n  const {\n    experiment,\n    error,\n    latestMetrics,\n    loading,\n    params,\n    refetchRun,\n    runInfo,\n    tags,\n    experimentFetchError,\n    runFetchError,\n    apiError,\n    datasets,\n    runInputs,\n    runOutputs,\n    registeredModelVersionSummaries,\n  } = useRunDetailsPageData({\n    experimentId,\n    runUuid,\n  });\n\n  const [modelMetricKeys, systemMetricKeys] = useMemo<[string[], string[]]>(() => {\n    if (!latestMetrics) {\n      return [[], []];\n    }\n\n    return [\n      Object.keys(latestMetrics).filter((metricKey) => !isSystemMetricKey(metricKey)),\n      Object.keys(latestMetrics).filter((metricKey) => isSystemMetricKey(metricKey)),\n    ];\n  }, [latestMetrics]);\n\n  const { comparedExperimentIds = [], hasComparedExperimentsBefore = false } = useSelector(\n    (state: ReduxState) => state.comparedExperiments || {},\n  );\n\n  const activeTab = useRunViewActiveTab();\n\n  const { models: loggedModelsV3, isLoading: isLoadingLoggedModels } = useLoggedModelsForExperimentRun(\n    experimentId,\n    runUuid,\n  );\n\n  const renderActiveTab = () => {\n    if (!runInfo) {\n      return null;\n    }\n    switch (activeTab) {\n      case RunPageTabName.MODEL_METRIC_CHARTS:\n        return (\n          <RunViewMetricCharts\n            key=\"model\"\n            mode=\"model\"\n            metricKeys={modelMetricKeys}\n            runInfo={runInfo}\n            latestMetrics={latestMetrics}\n            tags={tags}\n            params={params}\n          />\n        );\n\n      case RunPageTabName.SYSTEM_METRIC_CHARTS:\n        return (\n          <RunViewMetricCharts\n            key=\"system\"\n            mode=\"system\"\n            metricKeys={systemMetricKeys}\n            runInfo={runInfo}\n            latestMetrics={latestMetrics}\n            tags={tags}\n            params={params}\n          />\n        );\n      case RunPageTabName.ARTIFACTS:\n        return (\n          <RunViewArtifactTab\n            runUuid={runUuid}\n            runTags={tags}\n            runOutputs={runOutputs}\n            experimentId={experimentId}\n            artifactUri={runInfo.artifactUri ?? undefined}\n          />\n        );\n      case RunPageTabName.TRACES:\n        if (shouldEnableRunDetailsPageTracesTab()) {\n          return <RunViewTracesTab runUuid={runUuid} runTags={tags} experimentId={experimentId} />;\n        }\n    }\n\n    return (\n      <RunViewOverview\n        runInfo={runInfo}\n        tags={tags}\n        params={params}\n        latestMetrics={latestMetrics}\n        runUuid={runUuid}\n        onRunDataUpdated={refetchRun}\n        runInputs={runInputs}\n        runOutputs={runOutputs}\n        datasets={datasets}\n        registeredModelVersionSummaries={registeredModelVersionSummaries}\n        loggedModelsV3={loggedModelsV3}\n        isLoadingLoggedModels={isLoadingLoggedModels}\n      />\n    );\n  };\n\n  // Use full height page with scrollable tab area only for non-xs screens\n  const useFullHeightPage = useMediaQuery(`(min-width: ${theme.responsive.breakpoints.sm}px)`);\n\n  const initialLoading = loading && (!runInfo || !experiment);\n\n  // Handle \"run not found\" error\n  if (\n    // For REST API:\n    (runFetchError instanceof ErrorWrapper && runFetchError.getErrorCode() === ErrorCodes.RESOURCE_DOES_NOT_EXIST) ||\n    // For GraphQL:\n    apiError?.code === ErrorCodes.RESOURCE_DOES_NOT_EXIST ||\n    (error && getGraphQLErrorMessage(error).match(/not found$/))\n  ) {\n    return <RunNotFoundView runId={runUuid} />;\n  }\n\n  // Handle experiment not found error\n  if (\n    experimentFetchError instanceof ErrorWrapper &&\n    experimentFetchError.getErrorCode() === ErrorCodes.RESOURCE_DOES_NOT_EXIST\n  ) {\n    return <NotFoundPage />;\n  }\n\n  // Catch-all for legacy REST API errors\n  if (runFetchError || experimentFetchError) {\n    return null;\n  }\n\n  // Catch-all for GraphQL errors\n  if (shouldEnableGraphQLRunDetailsPage() && (error || apiError)) {\n    return (\n      <div css={{ marginTop: theme.spacing.lg }}>\n        <Empty\n          title={\n            <FormattedMessage\n              defaultMessage=\"Can't load run details\"\n              description=\"Run page > error loading page title\"\n            />\n          }\n          description={getGraphQLErrorMessage(apiError ?? error)}\n          image={<DangerIcon />}\n        />\n      </div>\n    );\n  }\n\n  // Display spinner/skeleton for the initial data load\n  if (initialLoading || !runInfo || !experiment) {\n    return <RunPageLoadingState />;\n  }\n\n  return (\n    <>\n      <PageContainer usesFullHeight={useFullHeightPage}>\n        {/* Header fixed on top */}\n        <RunViewHeader\n          comparedExperimentIds={comparedExperimentIds}\n          experiment={experiment}\n          handleRenameRunClick={() => setRenameModalVisible(true)}\n          handleDeleteRunClick={() => setDeleteModalVisible(true)}\n          hasComparedExperimentsBefore={hasComparedExperimentsBefore}\n          runDisplayName={Utils.getRunDisplayName(runInfo, runUuid)}\n          runTags={tags}\n          runParams={params}\n          runUuid={runUuid}\n          artifactRootUri={runInfo?.artifactUri ?? undefined}\n          registeredModelVersionSummaries={registeredModelVersionSummaries}\n          isLoading={loading || isLoadingLoggedModels}\n        />\n        {/* Scroll tab contents independently within own container */}\n        <div css={{ flex: 1, overflow: 'auto', marginBottom: theme.spacing.sm, display: 'flex' }}>\n          {renderActiveTab()}\n        </div>\n      </PageContainer>\n      <RenameRunModal\n        runUuid={runUuid}\n        onClose={() => setRenameModalVisible(false)}\n        runName={runInfo.runName ?? ''}\n        isOpen={renameModalVisible}\n        onSuccess={refetchRun}\n      />\n      <DeleteRunModal\n        selectedRunIds={[runUuid]}\n        onClose={() => setDeleteModalVisible(false)}\n        isOpen={deleteModalVisible}\n        onSuccess={() => {\n          navigate(Routes.getExperimentPageRoute(experimentId));\n        }}\n      />\n    </>\n  );\n};\n\nexport default RunPage;\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport { PageWrapper, Spacer } from '@databricks/design-system';\n\ntype OwnProps = {\n  usesFullHeight?: boolean;\n  children?: React.ReactNode;\n};\n\n// @ts-expect-error TS(2565): Property 'defaultProps' is used before being assig... Remove this comment to see the full error message\ntype Props = OwnProps & typeof PageContainer.defaultProps;\n\nexport function PageContainer(props: Props) {\n  const { usesFullHeight, ...restProps } = props;\n  return (\n    // @ts-expect-error TS(2322): Type '{ height: string; display: string; flexDirec... Remove this comment to see the full error message\n    <PageWrapper css={usesFullHeight ? styles.useFullHeightLayout : styles.wrapper}>\n      {/* @ts-expect-error TS(2322): Type '{ css: { flexShrink: number; }; }' is not as... Remove this comment to see the full error message */}\n      <Spacer css={styles.fixedSpacer} />\n      {usesFullHeight ? props.children : <div {...restProps} css={styles.container} />}\n    </PageWrapper>\n  );\n}\n\nPageContainer.defaultProps = {\n  usesFullHeight: false,\n};\n\nconst styles = {\n  useFullHeightLayout: {\n    height: 'calc(100% - 60px)', // 60px comes from header height\n    display: 'flex',\n    flexDirection: 'column',\n    '&:last-child': {\n      flexGrow: 1,\n    },\n  },\n  wrapper: { flex: 1 },\n  fixedSpacer: {\n    // Ensure spacer's fixed height regardless of flex\n    flexShrink: 0,\n  },\n  container: {\n    width: '100%',\n    flexGrow: 1,\n    paddingBottom: 24,\n  },\n};\n","import React, { Component } from 'react';\n\nclass NotFoundPage extends Component {\n  render() {\n    return <div>Resource not found.</div>;\n  }\n}\n\nexport default NotFoundPage;\n","import { matchPredefinedError, UnknownError } from '@databricks/web-shared/errors';\nimport { fetchEndpoint } from '../../../common/utils/FetchUtils';\nimport { RegisteredPrompt, RegisteredPromptsListResponse, RegisteredPromptVersion } from './types';\nimport { IS_PROMPT_TAG_NAME, IS_PROMPT_TAG_VALUE, REGISTERED_PROMPT_SOURCE_RUN_IDS } from './utils';\n\nconst defaultErrorHandler = async ({\n  reject,\n  response,\n  err: originalError,\n}: {\n  reject: (cause: any) => void;\n  response: Response;\n  err: Error;\n}) => {\n  // Try to match the error to one of the predefined errors\n  const predefinedError = matchPredefinedError(response);\n  const error = predefinedError instanceof UnknownError ? originalError : predefinedError;\n  if (response) {\n    try {\n      // Try to extract exact error message from the response\n      const messageFromResponse = (await response.json())?.message;\n      if (messageFromResponse) {\n        error.message = messageFromResponse;\n      }\n    } catch {\n      // If we fail to extract the message, we will keep the original error message\n    }\n  }\n\n  reject(error);\n};\n\nexport const RegisteredPromptsApi = {\n  listRegisteredPrompts: (searchFilter?: string, pageToken?: string) => {\n    const params = new URLSearchParams();\n    let filter = `tags.\\`${IS_PROMPT_TAG_NAME}\\` = '${IS_PROMPT_TAG_VALUE}'`;\n\n    if (searchFilter) {\n      filter = `${filter} AND name ILIKE '%${searchFilter}%'`;\n    }\n\n    if (pageToken) {\n      params.append('page_token', pageToken);\n    }\n\n    params.append('filter', filter);\n\n    const relativeUrl = ['ajax-api/2.0/mlflow/registered-models/search', params.toString()].join('?');\n    return fetchEndpoint({\n      relativeUrl,\n      error: defaultErrorHandler,\n    }) as Promise<RegisteredPromptsListResponse>;\n  },\n  setRegisteredPromptTag: (promptName: string, key: string, value: string) => {\n    return fetchEndpoint({\n      relativeUrl: 'ajax-api/2.0/mlflow/registered-models/set-tag',\n      method: 'POST',\n      body: JSON.stringify({ key, value, name: promptName }),\n      error: defaultErrorHandler,\n    });\n  },\n  deleteRegisteredPromptTag: (promptName: string, key: string) => {\n    return fetchEndpoint({\n      relativeUrl: 'ajax-api/2.0/mlflow/registered-models/delete-tag',\n      method: 'DELETE',\n      body: JSON.stringify({ key, name: promptName }),\n      error: defaultErrorHandler,\n    });\n  },\n  createRegisteredPrompt: (promptName: string) => {\n    return fetchEndpoint({\n      relativeUrl: 'ajax-api/2.0/mlflow/registered-models/create',\n      method: 'POST',\n      body: JSON.stringify({\n        name: promptName,\n        tags: [\n          {\n            key: IS_PROMPT_TAG_NAME,\n            value: IS_PROMPT_TAG_VALUE,\n          },\n        ],\n      }),\n      error: defaultErrorHandler,\n    }) as Promise<{\n      registered_model?: RegisteredPrompt;\n    }>;\n  },\n  createRegisteredPromptVersion: (\n    promptName: string,\n    tags: { key: string; value: string }[] = [],\n    description?: string,\n  ) => {\n    return fetchEndpoint({\n      relativeUrl: 'ajax-api/2.0/mlflow/model-versions/create',\n      method: 'POST',\n      body: JSON.stringify({\n        name: promptName,\n        description,\n        // Put a placeholder source here for now to satisfy the API validation\n        // TODO: remove source after it's no longer needed\n        source: 'dummy-source',\n        tags: [\n          {\n            key: IS_PROMPT_TAG_NAME,\n            value: IS_PROMPT_TAG_VALUE,\n          },\n          ...tags,\n        ],\n      }),\n      error: defaultErrorHandler,\n    }) as Promise<{\n      model_version?: RegisteredPromptVersion;\n    }>;\n  },\n  setRegisteredPromptVersionTag: (promptName: string, promptVersion: string, key: string, value: string) => {\n    return fetchEndpoint({\n      relativeUrl: 'ajax-api/2.0/mlflow/model-versions/set-tag',\n      method: 'POST',\n      body: JSON.stringify({ key, value, name: promptName, version: promptVersion }),\n      error: defaultErrorHandler,\n    });\n  },\n  deleteRegisteredPromptVersionTag: (promptName: string, promptVersion: string, key: string) => {\n    fetchEndpoint({\n      relativeUrl: 'ajax-api/2.0/mlflow/model-versions/delete-tag',\n      method: 'DELETE',\n      body: JSON.stringify({ key, name: promptName, version: promptVersion }),\n      error: defaultErrorHandler,\n    });\n  },\n  getPromptDetails: (promptName: string) => {\n    const params = new URLSearchParams();\n    params.append('name', promptName);\n    const relativeUrl = ['ajax-api/2.0/mlflow/registered-models/get', params.toString()].join('?');\n    return fetchEndpoint({\n      relativeUrl,\n      error: defaultErrorHandler,\n    }) as Promise<{\n      registered_model: RegisteredPrompt;\n    }>;\n  },\n  getPromptVersions: (promptName: string) => {\n    const params = new URLSearchParams();\n    params.append('filter', `name='${promptName}' AND tags.\\`${IS_PROMPT_TAG_NAME}\\` = '${IS_PROMPT_TAG_VALUE}'`);\n    const relativeUrl = ['ajax-api/2.0/mlflow/model-versions/search', params.toString()].join('?');\n    return fetchEndpoint({\n      relativeUrl,\n      error: defaultErrorHandler,\n    }) as Promise<{\n      model_versions?: RegisteredPromptVersion[];\n    }>;\n  },\n  getPromptVersionsForRun: (runUuid: string) => {\n    const params = new URLSearchParams();\n    params.append(\n      'filter',\n      `tags.\\`${IS_PROMPT_TAG_NAME}\\` = '${IS_PROMPT_TAG_VALUE}' AND tags.\\`${REGISTERED_PROMPT_SOURCE_RUN_IDS}\\` ILIKE \"%${runUuid}%\"`,\n    );\n    const relativeUrl = ['ajax-api/2.0/mlflow/model-versions/search', params.toString()].join('?');\n    return fetchEndpoint({\n      relativeUrl,\n      error: defaultErrorHandler,\n    }) as Promise<{\n      model_versions?: RegisteredPromptVersion[];\n    }>;\n  },\n  deleteRegisteredPrompt: (promptName: string) => {\n    return fetchEndpoint({\n      relativeUrl: 'ajax-api/2.0/mlflow/registered-models/delete',\n      method: 'DELETE',\n      body: JSON.stringify({ name: promptName }),\n      error: defaultErrorHandler,\n    });\n  },\n  deleteRegisteredPromptVersion: (promptName: string, version: string) => {\n    return fetchEndpoint({\n      relativeUrl: 'ajax-api/2.0/mlflow/model-versions/delete',\n      method: 'DELETE',\n      body: JSON.stringify({ name: promptName, version }),\n      error: defaultErrorHandler,\n    });\n  },\n};\n","import type { RegisteredPrompt, RegisteredPromptVersion } from './types';\n\nexport const REGISTERED_PROMPT_CONTENT_TAG_KEY = 'mlflow.prompt.text';\n// Tag key used to store the run ID associated with a single prompt version\nexport const REGISTERED_PROMPT_SOURCE_RUN_ID = 'mlflow.prompt.run_id';\n// Tak key used to store comma-separated run IDs associated with a prompt\nexport const REGISTERED_PROMPT_SOURCE_RUN_IDS = 'mlflow.prompt.run_ids';\nexport const IS_PROMPT_TAG_NAME = 'mlflow.prompt.is_prompt';\nexport const IS_PROMPT_TAG_VALUE = 'true';\n\nexport type PromptsTableMetadata = { onEditTags: (editedEntity: RegisteredPrompt) => void };\nexport type PromptsVersionsTableMetadata = {\n  showEditAliasesModal: (versionNumber: string) => void;\n  aliasesByVersion: Record<string, string[]>;\n  registeredPrompt: RegisteredPrompt;\n};\n\nexport enum PromptVersionsTableMode {\n  TABLE = 'table',\n  PREVIEW = 'preview',\n  COMPARE = 'compare',\n}\n\nexport const getPromptContentTagValue = (promptVersion: RegisteredPromptVersion) => {\n  return promptVersion?.tags?.find((tag) => tag.key === REGISTERED_PROMPT_CONTENT_TAG_KEY)?.value;\n};\n"],"names":["RunViewArtifactTab","_ref","runTags","experimentId","runOutputs","artifactUri","runUuid","theme","useDesignSystemTheme","useFullHeightPage","useMediaQuery","responsive","breakpoints","sm","_jsx","css","_css","flex","overflow","display","paddingBottom","spacing","md","position","children","ArtifactPage","useAutoHeight","artifactRootUri","useRunViewActiveTab","tabParam","useParams","RunPageTabName","MODEL_METRIC_CHARTS","SYSTEM_METRIC_CHARTS","shouldEnableRunDetailsPageTracesTab","TRACES","match","ARTIFACTS","OVERVIEW","TABS_WITHOUT_MARGIN","EVALUATIONS","RunViewModeSwitch","navigate","useNavigate","currentTab","removeTabMargin","setRemoveTabMargin","useState","includes","_jsxs","LegacyTabs","activeKey","onChange","newTabKey","Routes","getRunPageTabRoute","getRunPageRoute","tabBarStyle","margin","TabPane","tab","FormattedMessage","id","defaultMessage","_ref2","name","styles","_ref3","LoggedModelsDropdownContent","models","onRegisterClick","renderSection","title","sectionModels","DropdownMenu","Group","Label","map","model","registeredModelSummary","first","registeredModelVersionSummaries","Item","componentId","onClick","marginRight","last","path","split","HintColumn","Link","target","to","Button","type","size","e","stopPropagation","endIcon","NewWindowIcon","absolutePath","status","displayedName","version","link","IconWrapper","RegisteredModelOkIcon","ModelVersionStatusIcons","Tag","registeredModels","filter","length","unregisteredModels","_Fragment","Separator","RunViewHeaderRegisterModelButton","_ref4","loggedModelPaths","useMemo","Utils","getLoggedModelsFromTags","_ref5","artifactPath","orderBy","_ref6","source","_model$registeredMode","parseInt","selectedModelToRegister","setSelectedModelToRegister","modelsRegistered","RegisterModel","modelPath","modelRelativePath","disabled","showButton","modalVisible","onCloseModal","Root","modal","LegacyTooltip","placement","values","registeredCount","loggedCount","Trigger","asChild","ChevronDownIcon","Content","align","singleModel","registeredModelVersionSummary","marginLeft","buttonType","RunViewHeader","hasComparedExperimentsBefore","comparedExperimentIds","experiment","runDisplayName","runParams","handleRenameRunClick","handleDeleteRunClick","isLoading","breadcrumbs","_experiment$experimen","getCompareExperimentsPageRoute","numExperiments","getExperimentPageRoute","getExperimentPageLink","PageHeader","OverflowMenu","menu","itemName","renderRegisterModelButton","_experiment$experimen2","RunViewStatusBox","backgroundColor","isDarkMode","colors","green800","green100","red800","red100","blue800","blue100","RunStatusIcon","Typography","Text","color","RunViewUserLinkBox","_runInfo$experimentId","runInfo","tags","user","getUser","searchRunsByUser","systemMetricsLabel","modelMetricsLabel","defineMessages","metricKeyMatchesFilter","key","toLowerCase","RunViewMetricsTableSection","metricsList","header","table","column","keyColumn","getLeafHeaders","TableRow","TableCell","backgroundSecondary","bold","_runInfo$runUuid","value","style","flexGrow","flexBasis","getSize","getMetricPageRoute","toString","_ref9","_ref0","RunViewMetricsTable","latestMetrics","detailsPageTableStyles","detailsPageNoEntriesStyles","detailsPageNoResultsWrapperStyles","useExperimentTrackingDetailsPageLayoutStyles","intl","useIntl","setFilter","metricValues","columns","accessorKey","enableResizing","metricSegments","systemMetrics","isSystemMetricKey","modelMetrics","_ref7","formatMessage","metrics","undefined","useReactTable","data","getCoreRowModel","getRowId","row","enableColumnResizing","columnResizeMode","Title","level","padding","border","borderDecorative","borderRadius","general","borderRadiusBase","flexDirection","renderTableContent","Empty","description","areAllResultsFiltered","sum","_ref8","marginBottom","Input","prefix","SearchIcon","placeholder","allowClear","Table","scrollable","empty","isHeader","TableHeader","setColumnSizing","isResizing","getIsResizing","getCanResize","flexRender","columnDef","getContext","segment","index","DatasetEntry","dataset","role","ExperimentViewDatasetWithContext","datasetWithTags","displayTextAsLink","RunViewDatasetBox","datasets","selectedDatasetWithRun","setSelectedDatasetWithRun","isDrawerOpen","setIsDrawerOpen","firstDataset","remainingDatasets","slice","datasetClicked","_runInfo$runName","runData","runName","gap","alignItems","digest","ExperimentViewDatasetDrawer","isOpen","setIsOpen","RunViewParentRunBox","parentRunUuid","dispatch","useDispatch","parentRunInfoRedux","useSelector","entities","runInfosByUuid","parentRunInfoGraphql","useGetRunQuery","shouldEnableGraphQLRunDetailsPage","parentRunInfo","_parentRunInfoGraphql","info","useEffect","getRunApi","ParagraphSkeleton","loading","label","RunViewTagsBox","onTagsUpdated","visibleTagKeys","visibleTagEntities","keys","isUserFacingTag","EditTagsModal","showEditTagsModal","useEditKeyValueTagsModal","valueRequired","allAvailableTags","saveTagsHandler","async","_","existingTags","newTags","setRunTagsBulkApi","then","showEditModal","editTagsLabel","paddingTop","xs","flexWrap","tag","KeyValueTag","enableFullViewModal","Tooltip","content","icon","PencilIcon","Spinner","RunViewDescriptionBox","_tags$NOTE_CONTENT_TA","onDescriptionChanged","noteContent","NOTE_CONTENT_TAG","showNoteEditor","setShowNoteEditor","isEmpty","Hint","EditableNote","defaultMarkdown","onSubmit","markdown","setTagApi","onCancel","handleCancelEditNote","showEditor","RunViewRegisteredModelsBox","Overflow","modelSummary","queryFn","queryKey","RegisteredPromptsApi","getPromptVersionsForRun","RunViewRegisteredPromptsBox","error","_queryResult$error","options","arguments","queryResult","useQuery","retry","refetch","usePromptVersionsForRunQuery","promptVersions","model_versions","promptVersion","getPromptDetailsPageRoute","encodeURIComponent","displayText","RunViewLoggedModelsBox","loggedModels","loggedModelsV3","getModelFlavorName","flavors","shouldDisplayArtifactPaths","Set","cursor","height","heightBase","heightSm","ModelsIcon","_model$info$model_id","_model$info","_model$info$model_id2","_model$info2","_model$info3","getExperimentLoggedModelDetailsPageRoute","model_id","RunViewSourceBox","_tags$MLFLOW_RUN_GIT_","_tags$Utils$gitCommit","_tags$Utils$sourceTyp","search","className","branchName","MLFLOW_RUN_GIT_SOURCE_BRANCH_TAG","commitHash","gitCommitTag","runSource","renderSource","ExperimentSourceTypeIcon","sourceType","sourceTypeTag","actionPrimaryBackgroundDefault","BranchIcon","Popover","whiteSpace","alignContent","GitCommitIcon","Arrow","CopyButton","showLabel","copyText","CopyIcon","supportedAttributeColumnKeys","ExperimentLoggedModelListPageKnownColumns","RelationshipType","Step","Name","Status","CreationTime","RegisteredModels","Dataset","RunViewLoggedModelsTable","inputs","outputs","errors","useCombinedRunInputsOutputsModels","_inputs$modelInputs","_outputs$modelOutputs","inputModelIds","compact","uniq","modelInputs","modelInput","modelId","outputModelIds","modelOutputs","modelOutput","inputModelQueries","useGetLoggedModelQueries","outputModelQueries","inputLoggedModels","query","_query$data","_query$data2","direction","outputLoggedModels","_query$data3","_outputs$modelOutputs2","_query$data5","_correspondingOutputE","correspondingOutputEntry","find","_query$data4","_query$data4$model","_query$data4$model$in","step","_uniqBy","uniqBy","loggedModel","_loggedModel$data","metric","run_id","modelData","_modelData$info","Boolean","some","columnVisibility","setColumnVisibility","columnDefs","useExperimentLoggedModelListPageTableColumns","disablePinnedColumns","disableOrderBy","modelLoadError","ExperimentLoggedModelListPageColumnSelector","onUpdateColumns","customTrigger","ColumnsIcon","Spacer","shrinks","Error","message","Alert","closable","ExperimentLoggedModelOpenDatasetDetailsContextProvider","ExperimentLoggedModelListPageTable","isLoadingMore","moreResultsAvailable","disableLoadMore","getTableTheme","displayShowExampleButton","textPrimary","actionDefaultBackgroundHover","actionDefaultBackgroundPress","backgroundPrimary","overlayOverlay","borderTop","fontSize","typography","fontSizeBase","getShadowScrollStyles","orientation","RunViewDatasetBoxV2","textAlign","iconFontSize","RunDetailsPageMetadataSections","EmptyValue","RunViewOverview","onRunDataUpdated","params","runInputs","registeredModelVersionSummariesForRun","isLoadingLoggedModels","usingUnifiedDetailsLayout","useLocation","loggedModelsFromTags","parentRunIdTag","EXPERIMENT_PARENT_ID_TAG","containsLoggedModelsFromInputsOutputs","shouldRenderLoggedModelsBox","isRunPageLoggedModelsTableEnabled","shouldDisplayContentsOfLoggedModelsBox","loggedModelsV3RegisteredModels","useExperimentLoggedModelRegisteredVersions","detailsSectionsV2","_runInfo$runUuid2","detailsContent","KeyValueProperty","keyValue","startTime","formatTimestamp","NoneCell","DetailsOverviewCopyableIdBox","element","getDuration","endTime","DETAILS","DATASETS","TAGS","REGISTERED_MODELS","useRunDetailsPageOverviewSectionsV2","usingSidebarLayout","DetailsPageLayout","secondarySections","renderDetails","DetailsOverviewMetadataTable","DetailsOverviewMetadataRow","minHeight","maxHeight","lg","DetailsOverviewParamsTable","RunNotFoundView","runId","ErrorView","statusCode","subMessage","fallbackHomePageReactRoute","rootRoute","RunViewChartTooltipBody","_metricsForRun$metric","contextData","metricsForRun","hoverData","chartData","metricKey","isHovering","mode","singleTraceHoverData","containsMultipleRunsTooltipData","hoveredDataPoint","RunsChartsTooltipMode","MultipleTracesWithScanline","RunsMultipleTracesTooltipBody","metricEntity","timestamp","metricContainsHistory","isSystemMetric","displayTimestamp","isUndefined","displayStep","valueField","textOverflow","RunViewMetricChartsImpl","_runInfo$runUuid4","metricKeys","chartUIState","updateChartsUIState","setSearch","compareRunCharts","compareRunSections","chartsSearchFilter","visibleChartCards","_compareRunCharts$fil","chart","deleted","fullScreenChart","setFullScreenChart","mapValues","sampledMetricsByRunUuid","metricsByRange","metricsHistory","flat","tooltipContextValue","imagesByRunUuid","state","configuredCardConfig","setConfiguredCardConfig","reorderCharts","useReorderRunsChartsFn","insertCharts","useInsertRunsChartsFn","removeChart","useRemoveRunsChartFn","confirmChartCardConfiguration","useConfirmChartCardConfigurationFn","_runInfo$runUuid3","displayName","images","metricHistory","uuid","primary","resultChartSet","resultSectionSet","RunsChartsCardConfig","getBaseChartAndSectionConfigs","runsData","enabledSectionNames","MLFLOW_MODEL_METRIC_NAME","MLFLOW_SYSTEM_METRIC_NAME","filterMetricNames","startsWith","MLFLOW_SYSTEM_METRIC_PREFIX","current","isResultUpdated","updateChartAndSectionConfigs","isAccordionReordered","isTabActive","useIsTabActive","autoRefreshEnabled","shouldEnableRunDetailsPageAutoRefresh","containsLoggedImages","LOG_IMAGE_TAG_INDICATOR","usePopulateImagesByRunUuid","runUuids","runUuidsIsActive","enabled","RunsChartsFilterInput","ToggleButton","pressed","onPressedChange","RunsChartsGlobalChartSettingsDropdown","metricKeyList","globalLineChartConfig","updateUIState","RunsChartsTooltipWrapper","component","RunsChartsDraggableCardsGridContextProvider","RunsChartsSectionAccordion","startEditChart","chartCard","addNewChartCard","metricSectionId","getEmptyChartCardByType","supportedChartTypes","RunsChartType","LINE","BAR","IMAGE","groupBy","RunsChartsConfigureModal","chartRunData","paramKeyList","config","configuredCard","RunsChartsFullScreenModal","tooltipComponent","RunViewMetricCharts","props","persistenceIdentifier","localStore","LocalStorageUtils","getStoreForComponent","defaultChartState","xAxisKey","RunsChartsLineChartXAxisType","STEP","lineSmoothness","selectedXAxisMetricKey","persistedChartState","getItem","JSON","parse","setItem","stringify","RunsChartsUIConfigurationContextProvider","disabledColumns","ExperimentViewTracesTableColumns","RunViewTracesTab","stableExperimentId","TracesView","experimentIds","RunPageLoadingState","PageContainer","TitleSkeleton","Array","i","seed","RunPage","_runInfo$artifactUri2","renameModalVisible","setRenameModalVisible","deleteModalVisible","setDeleteModalVisible","invariant","refetchRun","experimentFetchError","runFetchError","apiError","useRunDetailsPageData","modelMetricKeys","systemMetricKeys","Object","comparedExperiments","activeTab","useLoggedModelsForExperimentRun","loggedModelsData","useSearchLoggedModelsQuery","isExperimentLoggedModelsUIEnabled","_loggedModelsData$fil","source_run_id","initialLoading","ErrorWrapper","getErrorCode","ErrorCodes","RESOURCE_DOES_NOT_EXIST","code","getGraphQLErrorMessage","NotFoundPage","marginTop","image","DangerIcon","usesFullHeight","getRunDisplayName","renderActiveTab","_runInfo$artifactUri","RenameRunModal","onClose","onSuccess","DeleteRunModal","selectedRunIds","restProps","PageWrapper","useFullHeightLayout","wrapper","fixedSpacer","container","defaultProps","flexShrink","width","Component","render","defaultErrorHandler","reject","response","err","originalError","predefinedError","matchPredefinedError","UnknownError","_await$response$json","messageFromResponse","json","listRegisteredPrompts","searchFilter","pageToken","URLSearchParams","IS_PROMPT_TAG_NAME","IS_PROMPT_TAG_VALUE","append","relativeUrl","join","fetchEndpoint","setRegisteredPromptTag","promptName","method","body","deleteRegisteredPromptTag","createRegisteredPrompt","createRegisteredPromptVersion","setRegisteredPromptVersionTag","deleteRegisteredPromptVersionTag","getPromptDetails","getPromptVersions","REGISTERED_PROMPT_SOURCE_RUN_IDS","deleteRegisteredPrompt","deleteRegisteredPromptVersion","REGISTERED_PROMPT_CONTENT_TAG_KEY","PromptVersionsTableMode","getPromptContentTagValue","_promptVersion$tags","_promptVersion$tags$f"],"sourceRoot":""}